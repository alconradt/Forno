
GccApplication13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000004ee  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800138  00800138  000005ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001658  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3b  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a14  00000000  00000000  000029e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000033fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b1  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e1  00000000  00000000  00003e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
}


void Appl__Handler(void)
{
User_Action = Display__GetEvent();
  ae:	0e 94 0f 02 	call	0x41e	; 0x41e <Display__GetEvent>
  b2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
		if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
		{
			switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	08 95       	ret
			{
			case KEY_OFF_EVENT:
				Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 9f 01 	call	0x33e	; 0x33e <Display__SetState>
				break;
  d0:	08 95       	ret
				
			case KEY_MIN_EVENT:
			{
				Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 9f 01 	call	0x33e	; 0x33e <Display__SetState>
				break;
  d8:	08 95       	ret
			}
				
			case KEY_MED_EVENT:
				Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 9f 01 	call	0x33e	; 0x33e <Display__SetState>
				break;
  e0:	08 95       	ret
				
			case KEY_MAX_EVENT:
				Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 9f 01 	call	0x33e	; 0x33e <Display__SetState>
  e8:	08 95       	ret

000000ea <main>:
{
	//#if (WATCHDOG_ENABLE == DISABLED)
	//DISABLE_WATCHDOG();
	//#endif //WATCHDOG_ENABLE
	//EnableInterrupts;
	Slot = SLOT_1;
  ea:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Slot>
	//RTCSC_RTCLKS = 0x00;
	//RTCSC_RTCPS = SLOT_TIME;
	//#endif //USE_FIXED_TIME_SLOT
	
	// Functions Initialization
	INITIALIZE_TASKS();
  ee:	0e 94 32 01 	call	0x264	; 0x264 <Hal__Initialize>
  f2:	0e 94 99 01 	call	0x332	; 0x332 <Display__Initialize>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
		
		// Re-start the RTC timer
	//	RTCSC = RTCSC | 0x80;
	//	#endif //USE_FIXED)TIME_SLOT
		
		Slot++;
  fa:	c1 e0       	ldi	r28, 0x01	; 1
		//#if (WATCHDOG_ENABLE == ENABLED)
		//RESET_WATCHDOG();	/* feeds the watch dog */
		//#endif //WATCHDOG_ENABLE
		
		//ALL_SLOTS_TASKS();
		switch(Slot)
  fc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Slot>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	39 f0       	breq	.+14     	; 0x112 <main+0x28>
 104:	18 f0       	brcs	.+6      	; 0x10c <main+0x22>
 106:	85 30       	cpi	r24, 0x05	; 5
 108:	38 f4       	brcc	.+14     	; 0x118 <main+0x2e>
 10a:	09 c0       	rjmp	.+18     	; 0x11e <main+0x34>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 10c:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 110:	06 c0       	rjmp	.+12     	; 0x11e <main+0x34>

			case SLOT_2:
			SLOT_2_TASKS();
 112:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Display__Handler>
			break;
 116:	03 c0       	rjmp	.+6      	; 0x11e <main+0x34>
		
		// Re-start the RTC timer
	//	RTCSC = RTCSC | 0x80;
	//	#endif //USE_FIXED)TIME_SLOT
		
		Slot++;
 118:	c0 93 3c 01 	sts	0x013C, r28	; 0x80013c <Slot>
 11c:	ef cf       	rjmp	.-34     	; 0xfc <main+0x12>
 11e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Slot>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 128:	85 30       	cpi	r24, 0x05	; 5
 12a:	40 f3       	brcs	.-48     	; 0xfc <main+0x12>
		{
			Slot = SLOT_1;
 12c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Slot>
 130:	e5 cf       	rjmp	.-54     	; 0xfc <main+0x12>

00000132 <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	fb 01       	movw	r30, r22
 136:	e4 5d       	subi	r30, 0xD4	; 212
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	31 f0       	breq	.+12     	; 0x14c <Gpio__PinConfig+0x1a>
 140:	18 f0       	brcs	.+6      	; 0x148 <Gpio__PinConfig+0x16>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	29 f0       	breq	.+10     	; 0x150 <Gpio__PinConfig+0x1e>
 146:	05 c0       	rjmp	.+10     	; 0x152 <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 148:	95 b1       	in	r25, 0x05	; 5
		break;
 14a:	03 c0       	rjmp	.+6      	; 0x152 <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
 14c:	98 b1       	in	r25, 0x08	; 8
		break;
 14e:	01 c0       	rjmp	.+2      	; 0x152 <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
 150:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	69 f4       	brne	.+26     	; 0x170 <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 156:	e8 2f       	mov	r30, r24
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	e0 50       	subi	r30, 0x00	; 0
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	01 90       	ld	r0, Z+
 164:	f0 81       	ld	r31, Z
 166:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 168:	81 81       	ldd	r24, Z+1	; 0x01
 16a:	82 2b       	or	r24, r18
 16c:	81 83       	std	Z+1, r24	; 0x01
 16e:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 170:	41 11       	cpse	r20, r1
 172:	14 c0       	rjmp	.+40     	; 0x19c <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 174:	e8 2f       	mov	r30, r24
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	01 90       	ld	r0, Z+
 182:	f0 81       	ld	r31, Z
 184:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 186:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 188:	db 01       	movw	r26, r22
 18a:	ac 5d       	subi	r26, 0xDC	; 220
 18c:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 18e:	9c 91       	ld	r25, X
 190:	98 23       	and	r25, r24
 192:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 194:	92 81       	ldd	r25, Z+2	; 0x02
 196:	82 2f       	mov	r24, r18
 198:	89 2b       	or	r24, r25
 19a:	82 83       	std	Z+2, r24	; 0x02
 19c:	08 95       	ret

0000019e <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 19e:	41 11       	cpse	r20, r1
 1a0:	14 c0       	rjmp	.+40     	; 0x1ca <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 1a2:	e8 2f       	mov	r30, r24
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e0 50       	subi	r30, 0x00	; 0
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	a0 81       	ld	r26, Z
 1b0:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 1b2:	12 96       	adiw	r26, 0x02	; 2
 1b4:	9c 91       	ld	r25, X
 1b6:	12 97       	sbiw	r26, 0x02	; 2
 1b8:	e6 2f       	mov	r30, r22
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ec 5d       	subi	r30, 0xDC	; 220
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	80 81       	ld	r24, Z
 1c2:	89 23       	and	r24, r25
 1c4:	12 96       	adiw	r26, 0x02	; 2
 1c6:	8c 93       	st	X, r24
 1c8:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 1ca:	e8 2f       	mov	r30, r24
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e0 50       	subi	r30, 0x00	; 0
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	a0 81       	ld	r26, Z
 1d8:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 1da:	12 96       	adiw	r26, 0x02	; 2
 1dc:	9c 91       	ld	r25, X
 1de:	12 97       	sbiw	r26, 0x02	; 2
 1e0:	e6 2f       	mov	r30, r22
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	e4 5d       	subi	r30, 0xD4	; 212
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	80 81       	ld	r24, Z
 1ea:	89 2b       	or	r24, r25
 1ec:	12 96       	adiw	r26, 0x02	; 2
 1ee:	8c 93       	st	X, r24
 1f0:	08 95       	ret

000001f2 <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 1f2:	e8 2f       	mov	r30, r24
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	01 90       	ld	r0, Z+
 200:	f0 81       	ld	r31, Z
 202:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 204:	90 81       	ld	r25, Z
 206:	e6 2f       	mov	r30, r22
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e4 5d       	subi	r30, 0xD4	; 212
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 20e:	80 81       	ld	r24, Z
 210:	98 23       	and	r25, r24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	09 f4       	brne	.+2      	; 0x218 <Gpio__PinRead+0x26>
 216:	80 e0       	ldi	r24, 0x00	; 0
    
}
 218:	08 95       	ret

0000021a <Hal__SetLed>:
 *  Use this function to turn a specific led ON or OFF
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
 21a:	46 2f       	mov	r20, r22
	Gpio__PinWrite(LED_GPIO[output].port, LED_GPIO[output].pin, value);
 21c:	e8 2f       	mov	r30, r24
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	e4 5f       	subi	r30, 0xF4	; 244
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	61 81       	ldd	r22, Z+1	; 0x01
 22a:	80 81       	ld	r24, Z
 22c:	0e 94 cf 00 	call	0x19e	; 0x19e <Gpio__PinWrite>
 230:	08 95       	ret

00000232 <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	f8 2e       	mov	r15, r24
 23e:	cc e0       	ldi	r28, 0x0C	; 12
 240:	d1 e0       	ldi	r29, 0x01	; 1
 242:	04 e1       	ldi	r16, 0x14	; 20
 244:	11 e0       	ldi	r17, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 246:	4f 2d       	mov	r20, r15
 248:	69 81       	ldd	r22, Y+1	; 0x01
 24a:	88 81       	ld	r24, Y
 24c:	0e 94 cf 00 	call	0x19e	; 0x19e <Gpio__PinWrite>
 250:	22 96       	adiw	r28, 0x02	; 2
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 252:	c0 17       	cp	r28, r16
 254:	d1 07       	cpc	r29, r17
 256:	b9 f7       	brne	.-18     	; 0x246 <Hal__SetAllLeds+0x14>
	{
		Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
	}
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	08 95       	ret

00000264 <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cc e0       	ldi	r28, 0x0C	; 12
 26e:	d1 e0       	ldi	r29, 0x01	; 1
 270:	04 e1       	ldi	r16, 0x14	; 20
 272:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	69 81       	ldd	r22, Y+1	; 0x01
 278:	88 81       	ld	r24, Y
 27a:	0e 94 99 00 	call	0x132	; 0x132 <Gpio__PinConfig>
 27e:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	//ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 280:	c0 17       	cp	r28, r16
 282:	d1 07       	cpc	r29, r17
 284:	b9 f7       	brne	.-18     	; 0x274 <Hal__Initialize+0x10>
 286:	c6 e0       	ldi	r28, 0x06	; 6
 288:	d1 e0       	ldi	r29, 0x01	; 1
 28a:	0c e0       	ldi	r16, 0x0C	; 12
 28c:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	69 81       	ldd	r22, Y+1	; 0x01
 292:	88 81       	ld	r24, Y
 294:	0e 94 99 00 	call	0x132	; 0x132 <Gpio__PinConfig>
 298:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 29a:	c0 17       	cp	r28, r16
 29c:	d1 07       	cpc	r29, r17
 29e:	b9 f7       	brne	.-18     	; 0x28e <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(ON);   //apaga todos leds
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 19 01 	call	0x232	; 0x232 <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
 2a6:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
 2a8:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
 2aa:	20 9a       	sbi	0x04, 0	; 4
	
	
	//Gpio__PinConfig(PORTD, 4, OUTPUT_DIGITAL);
	//Gpio__PinConfig(PORTD, 7, OUTPUT_DIGITAL);
	//Gpio__PinConfig(PORTB, 0, OUTPUT_DIGITAL);
	}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <Hal__ReadKey>:
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
unsigned char value;
value = Gpio__PinRead(KEYS_GPIO[key].port, KEYS_GPIO[key].pin);
 2b6:	e8 2f       	mov	r30, r24
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ea 5f       	subi	r30, 0xFA	; 250
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	61 81       	ldd	r22, Z+1	; 0x01
 2c4:	80 81       	ld	r24, Z
 2c6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Gpio__PinRead>
return (value);
}
 2ca:	08 95       	ret

000002cc <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
 2cc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SevenSeg_WriteValueToSegment>
 2d0:	08 95       	ret

000002d2 <SevenSeg_WriteValueToSegment>:


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char Value)
{
	bitClear(PORTD, LATCH_PIN);
 2d2:	5c 98       	cbi	0x0b, 4	; 11
 2d4:	27 e0       	ldi	r18, 0x07	; 7
 2d6:	30 e0       	ldi	r19, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, ((Value) & (1 << (7 - i))));
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	ab 01       	movw	r20, r22
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <SevenSeg_WriteValueToSegment+0x12>
 2e0:	55 95       	asr	r21
 2e2:	47 95       	ror	r20
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <SevenSeg_WriteValueToSegment+0xe>
 2e8:	40 ff       	sbrs	r20, 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <SevenSeg_WriteValueToSegment+0x1e>
 2ec:	28 9a       	sbi	0x05, 0	; 5
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <SevenSeg_WriteValueToSegment+0x20>
 2f0:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, CLK_PIN);
 2f2:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, CLK_PIN);
 2f4:	5f 98       	cbi	0x0b, 7	; 11
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	31 09       	sbc	r19, r1
 2fa:	78 f7       	brcc	.-34     	; 0x2da <SevenSeg_WriteValueToSegment+0x8>
 2fc:	27 e0       	ldi	r18, 0x07	; 7
 2fe:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, (SEGMENT_SELECT[Segment] & (1 << (7 - i))));
 300:	e8 2f       	mov	r30, r24
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ec 5c       	subi	r30, 0xCC	; 204
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	40 81       	ld	r20, Z
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	ca 01       	movw	r24, r20
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <SevenSeg_WriteValueToSegment+0x44>
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <SevenSeg_WriteValueToSegment+0x40>
 31a:	80 ff       	sbrs	r24, 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <SevenSeg_WriteValueToSegment+0x50>
 31e:	28 9a       	sbi	0x05, 0	; 5
 320:	01 c0       	rjmp	.+2      	; 0x324 <SevenSeg_WriteValueToSegment+0x52>
 322:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, CLK_PIN);
 324:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, CLK_PIN);
 326:	5f 98       	cbi	0x0b, 7	; 11
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	31 09       	sbc	r19, r1
 32c:	78 f7       	brcc	.-34     	; 0x30c <SevenSeg_WriteValueToSegment+0x3a>
	}

	bitSet(PORTD, LATCH_PIN);
 32e:	5c 9a       	sbi	0x0b, 4	; 11
 330:	08 95       	ret

00000332 <Display__Initialize>:
 *  
 */
void Display__Initialize(void)
{
	//LCD_Current_Oven_Display = 0xFF;  comentado ATYW 19/09/18
	Oven_Display_State = OVEN_INIT;
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 338:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <Display_Keys_Map>
 33c:	08 95       	ret

0000033e <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 33e:	86 30       	cpi	r24, 0x06	; 6
 340:	10 f4       	brcc	.+4      	; 0x346 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 342:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Oven_Display_State>
 346:	08 95       	ret

00000348 <UpdateDisplayLeds>:
 *  Atualiza  Leds 
 */
void UpdateDisplayLeds(void)
{
	
	switch(Oven_Display_State)
 348:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Oven_Display_State>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	51 f0       	breq	.+20     	; 0x364 <UpdateDisplayLeds+0x1c>
 350:	28 f0       	brcs	.+10     	; 0x35c <UpdateDisplayLeds+0x14>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	a1 f0       	breq	.+40     	; 0x37e <UpdateDisplayLeds+0x36>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	f9 f0       	breq	.+62     	; 0x398 <UpdateDisplayLeds+0x50>
 35a:	08 95       	ret
	{
	case OVEN_OFF:
	       {
	       Hal__SetAllLeds(APAGA_LED);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 19 01 	call	0x232	; 0x232 <Hal__SetAllLeds>
		   break;
 362:	08 95       	ret
	case OVEN_INIT:
	case OVEN_TIMEOUT:
	   	break;
	case OVEN_MIN:
	    {
		Hal__SetLed(LED_0, ACENDE_LED);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		break;
 37c:	08 95       	ret
	    }
	case OVEN_MED:
	    {
		Hal__SetLed(LED_0, ACENDE_LED);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		break;
 396:	08 95       	ret
	   }
	case OVEN_MAX:
	   {
		Hal__SetLed(LED_0, ACENDE_LED);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 0d 01 	call	0x21a	; 0x21a <Hal__SetLed>
 3b0:	08 95       	ret

000003b2 <ReadDisplayKeys>:
 */
void ReadDisplayKeys(void)

{

	value1 = Hal__ReadKey(KEY_0);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Hal__ReadKey>
 3b8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <value1>
	value2 = Hal__ReadKey(KEY_1);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Hal__ReadKey>
 3c2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <value2>
	value3 = Hal__ReadKey(KEY_2);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Hal__ReadKey>
 3cc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <value3>

	if (value1==0 && value3==0)
 3d0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <value1>
 3d4:	91 11       	cpse	r25, r1
 3d6:	16 c0       	rjmp	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d8:	81 11       	cpse	r24, r1
 3da:	0c c0       	rjmp	.+24     	; 0x3f4 <ReadDisplayKeys+0x42>
	{
		Display_Keys_Map = KEY_OFF_EVENT;
 3dc:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <Display_Keys_Map>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	2f eb       	ldi	r18, 0xBF	; 191
 3e2:	87 e2       	ldi	r24, 0x27	; 39
 3e4:	99 e0       	ldi	r25, 0x09	; 9
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <ReadDisplayKeys+0x34>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <ReadDisplayKeys+0x3e>
 3f0:	00 00       	nop
 3f2:	08 95       	ret
	}
	else
	{
		if(value1 == 0)    //reads key 1 (at SW1)
		{
			Display_Keys_Map = KEY_MIN_EVENT;
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <Display_Keys_Map>
		}
		if(value2 == 0)           //reads key 2 (at SW2)
 3fa:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <value2>
 3fe:	99 23       	and	r25, r25
 400:	29 f0       	breq	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	08 95       	ret
 404:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <value2>
 408:	91 11       	cpse	r25, r1
 40a:	03 c0       	rjmp	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			Display_Keys_Map = KEY_MED_EVENT;
 40c:	92 e0       	ldi	r25, 0x02	; 2
 40e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <Display_Keys_Map>
		}
		if(value3 == 0)   //reads key 3 (at SW3)
 412:	81 11       	cpse	r24, r1
 414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		{
			Display_Keys_Map = KEY_MAX_EVENT;
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Display_Keys_Map>
 41c:	08 95       	ret

0000041e <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
 41e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
}
 422:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Display_Keys_Map>
 426:	08 95       	ret

00000428 <UpdateDisplaySevenSeg>:
/**
 *  Atualiza  7 Segmentos chamando Hal__WriteValtoSegment() para cada segmento
 */

void UpdateDisplaySevenSeg(void)
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
	
switch(Oven_Display_State)
 42c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Oven_Display_State>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	c9 f0       	breq	.+50     	; 0x466 <UpdateDisplaySevenSeg+0x3e>
 434:	28 f0       	brcs	.+10     	; 0x440 <UpdateDisplaySevenSeg+0x18>
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	49 f1       	breq	.+82     	; 0x48c <UpdateDisplaySevenSeg+0x64>
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	d1 f1       	breq	.+116    	; 0x4b2 <UpdateDisplaySevenSeg+0x8a>
 43e:	4b c0       	rjmp	.+150    	; 0x4d6 <UpdateDisplaySevenSeg+0xae>
{
	case OVEN_OFF:
	{
		// coloca o valor no 7segmento = 0000
		Hal__WriteValtoSegment((char)0, (char)ZERADO_DIGITO[0]);
 440:	c0 e2       	ldi	r28, 0x20	; 32
 442:	d1 e0       	ldi	r29, 0x01	; 1
 444:	68 81       	ld	r22, Y
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)1, (char)ZERADO_DIGITO[1]);
 44c:	69 81       	ldd	r22, Y+1	; 0x01
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)2, (char)ZERADO_DIGITO[2]);
 454:	6a 81       	ldd	r22, Y+2	; 0x02
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)3, (char)ZERADO_DIGITO[3]);
 45c:	6b 81       	ldd	r22, Y+3	; 0x03
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		break;
 464:	38 c0       	rjmp	.+112    	; 0x4d6 <UpdateDisplaySevenSeg+0xae>
	case OVEN_TIMEOUT:
	break;
	case OVEN_MIN:
	{
		// coloca o valor no 7segmento = 0080
		Hal__WriteValtoSegment((char)0, (char)MINIMO_DIGITO[0]);
 466:	cc e1       	ldi	r28, 0x1C	; 28
 468:	d1 e0       	ldi	r29, 0x01	; 1
 46a:	68 81       	ld	r22, Y
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)1, (char)MINIMO_DIGITO[1]);
 472:	69 81       	ldd	r22, Y+1	; 0x01
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)2, (char)MINIMO_DIGITO[2]);
 47a:	6a 81       	ldd	r22, Y+2	; 0x02
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)3, (char)MINIMO_DIGITO[3]);
 482:	6b 81       	ldd	r22, Y+3	; 0x03
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		break;
 48a:	25 c0       	rjmp	.+74     	; 0x4d6 <UpdateDisplaySevenSeg+0xae>
	}
	case OVEN_MED:
	{
		// coloca o valor no 7segmento = 0280
		Hal__WriteValtoSegment((char)0, (char)MEDIO_DIGITO[0]);
 48c:	c8 e1       	ldi	r28, 0x18	; 24
 48e:	d1 e0       	ldi	r29, 0x01	; 1
 490:	68 81       	ld	r22, Y
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)1, (char)MEDIO_DIGITO[1]);
 498:	69 81       	ldd	r22, Y+1	; 0x01
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)2, (char)MEDIO_DIGITO[2]);
 4a0:	6a 81       	ldd	r22, Y+2	; 0x02
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)3, (char)MEDIO_DIGITO[3]);
 4a8:	6b 81       	ldd	r22, Y+3	; 0x03
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		break;
 4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <UpdateDisplaySevenSeg+0xae>
	}
	case OVEN_MAX:
	{
		// coloca o valor no 7segmento = 0320
		Hal__WriteValtoSegment((char)0, (char)MAXIMO_DIGITO[0]);
 4b2:	c4 e1       	ldi	r28, 0x14	; 20
 4b4:	d1 e0       	ldi	r29, 0x01	; 1
 4b6:	68 81       	ld	r22, Y
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)1, (char)MAXIMO_DIGITO[1]);
 4be:	69 81       	ldd	r22, Y+1	; 0x01
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)2, (char)MAXIMO_DIGITO[2]);
 4c6:	6a 81       	ldd	r22, Y+2	; 0x02
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
		Hal__WriteValtoSegment((char)3, (char)MAXIMO_DIGITO[3]);
 4ce:	6b 81       	ldd	r22, Y+3	; 0x03
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__WriteValtoSegment>
	{
		break;
	}
}

 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <Display__Handler>:
/**
 *  
 */
void Display__Handler(void)
{
ReadDisplayKeys();          // lê os Keys!
 4dc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <ReadDisplayKeys>
	
#if (LED_DISPLAY == ENABLED)	
	UpdateDisplayLeds();
 4e0:	0e 94 a4 01 	call	0x348	; 0x348 <UpdateDisplayLeds>
#endif	

#if (SEVEN_SEG_DISPLAY == ENABLED)
	UpdateDisplaySevenSeg();
 4e4:	0e 94 14 02 	call	0x428	; 0x428 <UpdateDisplaySevenSeg>
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
