
appl_hal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800116  00800116  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c92  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000451  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00002305  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
Gpio__PinConfig(PORT_B,LED1,OUTPUT_DIGITAL);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	65 e0       	ldi	r22, 0x05	; 5
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 ae 00 	call	0x15c	; 0x15c <Gpio__PinConfig>
Gpio__PinConfig(PORT_B,LED2,OUTPUT_DIGITAL);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	64 e0       	ldi	r22, 0x04	; 4
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 ae 00 	call	0x15c	; 0x15c <Gpio__PinConfig>
Gpio__PinConfig(PORT_B,LED3,OUTPUT_DIGITAL);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 ae 00 	call	0x15c	; 0x15c <Gpio__PinConfig>
Gpio__PinConfig(PORT_B,LED4,OUTPUT_DIGITAL);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 ae 00 	call	0x15c	; 0x15c <Gpio__PinConfig>

Gpio__PinConfig(PORT_C,SW1,INPUT_DIGITAL_PULLUP);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 ae 00 	call	0x15c	; 0x15c <Gpio__PinConfig>

// apaga todos os leds
Gpio__PinWrite(PORT_B,LED1, APAGADO);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Gpio__PinWrite>
Gpio__PinWrite(PORT_B,LED2, APAGADO);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Gpio__PinWrite>
Gpio__PinWrite(PORT_B,LED3, APAGADO);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Gpio__PinWrite>
Gpio__PinWrite(PORT_B,LED4, APAGADO);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Gpio__PinWrite>
 100:	08 95       	ret

00000102 <Appl__Handler>:

void Appl__Handler(void)
{
unsigned char value;

value = Gpio__PinRead(PORT_C, SW1); //reads key 0 (at C1)
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 03 01 	call	0x206	; 0x206 <Gpio__PinRead>
if(value == SW_ON) // Read 0 when key is pressed 
 10a:	81 11       	cpse	r24, r1
 10c:	05 c0       	rjmp	.+10     	; 0x118 <Appl__Handler+0x16>
	Gpio__PinWrite(PORT_B, LED2,ACESO); //LED turns ON with 0 (LEDs use Inverse logic)
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	64 e0       	ldi	r22, 0x04	; 4
 112:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Gpio__PinWrite>
 116:	08 95       	ret
else		
	Gpio__PinWrite(PORT_B, LED2, APAGADO); //LED turns OFF with 1 (LEDs use Inverse logic)
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Gpio__PinWrite>
 122:	08 95       	ret

00000124 <main>:
{
	//#if (WATCHDOG_ENABLE == DISABLED)
	//DISABLE_WATCHDOG();
	//#endif //WATCHDOG_ENABLE
	//EnableInterrupts;
	Slot = SLOT_1;
 124:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	//RTCSC_RTCLKS = 0x00;
	//RTCSC_RTCPS = SLOT_TIME;
	//#endif //USE_FIXED_TIME_SLOT
	
	// Functions Initialization
	INITIALIZE_TASKS();
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
		
		// Re-start the RTC timer
	//	RTCSC = RTCSC | 0x80;
	//	#endif //USE_FIXED)TIME_SLOT
		
		Slot++;
 12c:	c1 e0       	ldi	r28, 0x01	; 1
		//#if (WATCHDOG_ENABLE == ENABLED)
		//RESET_WATCHDOG();	/* feeds the watch dog */
		//#endif //WATCHDOG_ENABLE
		
		//ALL_SLOTS_TASKS();
		switch(Slot)
 12e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 132:	88 23       	and	r24, r24
 134:	19 f0       	breq	.+6      	; 0x13c <main+0x18>
 136:	85 30       	cpi	r24, 0x05	; 5
 138:	20 f4       	brcc	.+8      	; 0x142 <main+0x1e>
 13a:	06 c0       	rjmp	.+12     	; 0x148 <main+0x24>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 13c:	0e 94 81 00 	call	0x102	; 0x102 <Appl__Handler>
			break;
 140:	03 c0       	rjmp	.+6      	; 0x148 <main+0x24>
		
		// Re-start the RTC timer
	//	RTCSC = RTCSC | 0x80;
	//	#endif //USE_FIXED)TIME_SLOT
		
		Slot++;
 142:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <__data_end>
 146:	f3 cf       	rjmp	.-26     	; 0x12e <main+0xa>
 148:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	60 f3       	brcs	.-40     	; 0x12e <main+0xa>
		{
			Slot = SLOT_1;
 156:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 15a:	e9 cf       	rjmp	.-46     	; 0x12e <main+0xa>

0000015c <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	fb 01       	movw	r30, r22
 160:	e2 5f       	subi	r30, 0xF2	; 242
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	20 81       	ld	r18, Z
		pt_data = PORTD;
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <Gpio__PinConfig+0x28>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	01 90       	ld	r0, Z+
 178:	f0 81       	ld	r31, Z
 17a:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	82 2b       	or	r24, r18
 180:	81 83       	std	Z+1, r24	; 0x01
 182:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 184:	41 11       	cpse	r20, r1
 186:	14 c0       	rjmp	.+40     	; 0x1b0 <Gpio__PinConfig+0x54>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 188:	e8 2f       	mov	r30, r24
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	01 90       	ld	r0, Z+
 196:	f0 81       	ld	r31, Z
 198:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 19a:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 19c:	db 01       	movw	r26, r22
 19e:	aa 5f       	subi	r26, 0xFA	; 250
 1a0:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 1a2:	9c 91       	ld	r25, X
 1a4:	98 23       	and	r25, r24
 1a6:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 1a8:	92 81       	ldd	r25, Z+2	; 0x02
 1aa:	82 2f       	mov	r24, r18
 1ac:	89 2b       	or	r24, r25
 1ae:	82 83       	std	Z+2, r24	; 0x02
 1b0:	08 95       	ret

000001b2 <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 1b2:	41 11       	cpse	r20, r1
 1b4:	14 c0       	rjmp	.+40     	; 0x1de <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 1b6:	e8 2f       	mov	r30, r24
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	e0 50       	subi	r30, 0x00	; 0
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	a0 81       	ld	r26, Z
 1c4:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	9c 91       	ld	r25, X
 1ca:	12 97       	sbiw	r26, 0x02	; 2
 1cc:	e6 2f       	mov	r30, r22
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ea 5f       	subi	r30, 0xFA	; 250
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	80 81       	ld	r24, Z
 1d6:	89 23       	and	r24, r25
 1d8:	12 96       	adiw	r26, 0x02	; 2
 1da:	8c 93       	st	X, r24
 1dc:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 1de:	e8 2f       	mov	r30, r24
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	e0 50       	subi	r30, 0x00	; 0
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	a0 81       	ld	r26, Z
 1ec:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 1ee:	12 96       	adiw	r26, 0x02	; 2
 1f0:	9c 91       	ld	r25, X
 1f2:	12 97       	sbiw	r26, 0x02	; 2
 1f4:	e6 2f       	mov	r30, r22
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	e2 5f       	subi	r30, 0xF2	; 242
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	80 81       	ld	r24, Z
 1fe:	89 2b       	or	r24, r25
 200:	12 96       	adiw	r26, 0x02	; 2
 202:	8c 93       	st	X, r24
 204:	08 95       	ret

00000206 <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 206:	e8 2f       	mov	r30, r24
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e0 50       	subi	r30, 0x00	; 0
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	01 90       	ld	r0, Z+
 214:	f0 81       	ld	r31, Z
 216:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 218:	90 81       	ld	r25, Z
 21a:	e6 2f       	mov	r30, r22
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	e2 5f       	subi	r30, 0xF2	; 242
 220:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 222:	80 81       	ld	r24, Z
 224:	98 23       	and	r25, r24
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	09 f4       	brne	.+2      	; 0x22c <Gpio__PinRead+0x26>
 22a:	80 e0       	ldi	r24, 0x00	; 0
    
}
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
