
appl_sys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800124  00800124  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132e  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b51  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000732  00000000  00000000  00002457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f5  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d9  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000037ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
 *  Inicializa variável referente a ação do user
 */

void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
 *  Muda o estado do forno em função da ação do user pelas chaves 
 */

void Appl__Handler(void)
{
User_Action = Display__GetEvent();
  ae:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Display__GetEvent>
  b2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
		if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
		{
			switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <Appl__Handler+0x3a>
			{
			case KEY_OFF_EVENT:
				Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Display__SetState>
				break;
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <Appl__Handler+0x3a>
				
			case KEY_MIN_EVENT:
			{
				Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Display__SetState>
				break;
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <Appl__Handler+0x3a>
			}
				
			case KEY_MED_EVENT:
				Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Display__SetState>
				break;
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <Appl__Handler+0x3a>
				
			case KEY_MAX_EVENT:
				Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Display__SetState>
			default:
				break;

			}
		}
Display__Handler();  //Faz o display(leds) do estado do forno
  e8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Display__Handler>
  ec:	08 95       	ret

000000ee <main>:
{
	//#if (WATCHDOG_ENABLE == DISABLED)
	//DISABLE_WATCHDOG();
	//#endif //WATCHDOG_ENABLE
	//EnableInterrupts;
	Slot = SLOT_1;
  ee:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Slot>
	//RTCSC_RTCLKS = 0x00;
	//RTCSC_RTCPS = SLOT_TIME;
	//#endif //USE_FIXED_TIME_SLOT
	
	// Functions Initialization
	INITIALIZE_TASKS();
  f2:	0e 94 29 01 	call	0x252	; 0x252 <Hal__Initialize>
  f6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Display__Initialize>
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
		
		// Re-start the RTC timer
	//	RTCSC = RTCSC | 0x80;
	//	#endif //USE_FIXED)TIME_SLOT
		
		Slot++;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
		//#if (WATCHDOG_ENABLE == ENABLED)
		//RESET_WATCHDOG();	/* feeds the watch dog */
		//#endif //WATCHDOG_ENABLE
		
		//ALL_SLOTS_TASKS();
		switch(Slot)
 100:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Slot>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	39 f0       	breq	.+14     	; 0x116 <main+0x28>
 108:	18 f0       	brcs	.+6      	; 0x110 <main+0x22>
 10a:	85 30       	cpi	r24, 0x05	; 5
 10c:	38 f4       	brcc	.+14     	; 0x11c <main+0x2e>
 10e:	09 c0       	rjmp	.+18     	; 0x122 <main+0x34>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 110:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 114:	06 c0       	rjmp	.+12     	; 0x122 <main+0x34>

			case SLOT_2:
			SLOT_2_TASKS();
 116:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Display__Handler>
			break;
 11a:	03 c0       	rjmp	.+6      	; 0x122 <main+0x34>
		
		// Re-start the RTC timer
	//	RTCSC = RTCSC | 0x80;
	//	#endif //USE_FIXED)TIME_SLOT
		
		Slot++;
 11c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <Slot>
 120:	ef cf       	rjmp	.-34     	; 0x100 <main+0x12>
 122:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Slot>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 12c:	85 30       	cpi	r24, 0x05	; 5
 12e:	40 f3       	brcs	.-48     	; 0x100 <main+0x12>
		{
			Slot = SLOT_1;
 130:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Slot>
 134:	e5 cf       	rjmp	.-54     	; 0x100 <main+0x12>

00000136 <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	fb 01       	movw	r30, r22
 13a:	e4 5e       	subi	r30, 0xE4	; 228
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	20 81       	ld	r18, Z
		pt_data = PORTD;
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <Gpio__PinConfig+0x28>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e0 50       	subi	r30, 0x00	; 0
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	01 90       	ld	r0, Z+
 152:	f0 81       	ld	r31, Z
 154:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 156:	81 81       	ldd	r24, Z+1	; 0x01
 158:	82 2b       	or	r24, r18
 15a:	81 83       	std	Z+1, r24	; 0x01
 15c:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 15e:	41 11       	cpse	r20, r1
 160:	14 c0       	rjmp	.+40     	; 0x18a <Gpio__PinConfig+0x54>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	01 90       	ld	r0, Z+
 170:	f0 81       	ld	r31, Z
 172:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 174:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 176:	db 01       	movw	r26, r22
 178:	ac 5e       	subi	r26, 0xEC	; 236
 17a:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 17c:	9c 91       	ld	r25, X
 17e:	98 23       	and	r25, r24
 180:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 182:	92 81       	ldd	r25, Z+2	; 0x02
 184:	82 2f       	mov	r24, r18
 186:	89 2b       	or	r24, r25
 188:	82 83       	std	Z+2, r24	; 0x02
 18a:	08 95       	ret

0000018c <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 18c:	41 11       	cpse	r20, r1
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 190:	e8 2f       	mov	r30, r24
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	a0 81       	ld	r26, Z
 19e:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 1a0:	12 96       	adiw	r26, 0x02	; 2
 1a2:	9c 91       	ld	r25, X
 1a4:	12 97       	sbiw	r26, 0x02	; 2
 1a6:	e6 2f       	mov	r30, r22
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ec 5e       	subi	r30, 0xEC	; 236
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	80 81       	ld	r24, Z
 1b0:	89 23       	and	r24, r25
 1b2:	12 96       	adiw	r26, 0x02	; 2
 1b4:	8c 93       	st	X, r24
 1b6:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 1b8:	e8 2f       	mov	r30, r24
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	a0 81       	ld	r26, Z
 1c6:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 1c8:	12 96       	adiw	r26, 0x02	; 2
 1ca:	9c 91       	ld	r25, X
 1cc:	12 97       	sbiw	r26, 0x02	; 2
 1ce:	e6 2f       	mov	r30, r22
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	e4 5e       	subi	r30, 0xE4	; 228
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	80 81       	ld	r24, Z
 1d8:	89 2b       	or	r24, r25
 1da:	12 96       	adiw	r26, 0x02	; 2
 1dc:	8c 93       	st	X, r24
 1de:	08 95       	ret

000001e0 <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 1e0:	e8 2f       	mov	r30, r24
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e0 50       	subi	r30, 0x00	; 0
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	01 90       	ld	r0, Z+
 1ee:	f0 81       	ld	r31, Z
 1f0:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 1f2:	90 81       	ld	r25, Z
 1f4:	e6 2f       	mov	r30, r22
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	e4 5e       	subi	r30, 0xE4	; 228
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 1fc:	80 81       	ld	r24, Z
 1fe:	98 23       	and	r25, r24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	09 f4       	brne	.+2      	; 0x206 <Gpio__PinRead+0x26>
 204:	80 e0       	ldi	r24, 0x00	; 0
    
}
 206:	08 95       	ret

00000208 <Hal__SetLed>:
 *  Use this function to turn a specific led ON or OFF
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
 208:	46 2f       	mov	r20, r22
	Gpio__PinWrite(LED_GPIO[output].port, LED_GPIO[output].pin, value);
 20a:	e8 2f       	mov	r30, r24
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e4 5f       	subi	r30, 0xF4	; 244
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	61 81       	ldd	r22, Z+1	; 0x01
 218:	80 81       	ld	r24, Z
 21a:	0e 94 c6 00 	call	0x18c	; 0x18c <Gpio__PinWrite>
 21e:	08 95       	ret

00000220 <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	f8 2e       	mov	r15, r24
 22c:	cc e0       	ldi	r28, 0x0C	; 12
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	04 e1       	ldi	r16, 0x14	; 20
 232:	11 e0       	ldi	r17, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 234:	4f 2d       	mov	r20, r15
 236:	69 81       	ldd	r22, Y+1	; 0x01
 238:	88 81       	ld	r24, Y
 23a:	0e 94 c6 00 	call	0x18c	; 0x18c <Gpio__PinWrite>
 23e:	22 96       	adiw	r28, 0x02	; 2
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 240:	c0 17       	cp	r28, r16
 242:	d1 07       	cpc	r29, r17
 244:	b9 f7       	brne	.-18     	; 0x234 <Hal__SetAllLeds+0x14>
	{
		Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
	}
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	08 95       	ret

00000252 <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cc e0       	ldi	r28, 0x0C	; 12
 25c:	d1 e0       	ldi	r29, 0x01	; 1
 25e:	04 e1       	ldi	r16, 0x14	; 20
 260:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	69 81       	ldd	r22, Y+1	; 0x01
 266:	88 81       	ld	r24, Y
 268:	0e 94 9b 00 	call	0x136	; 0x136 <Gpio__PinConfig>
 26c:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	//ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 26e:	c0 17       	cp	r28, r16
 270:	d1 07       	cpc	r29, r17
 272:	b9 f7       	brne	.-18     	; 0x262 <Hal__Initialize+0x10>
 274:	c6 e0       	ldi	r28, 0x06	; 6
 276:	d1 e0       	ldi	r29, 0x01	; 1
 278:	0c e0       	ldi	r16, 0x0C	; 12
 27a:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	69 81       	ldd	r22, Y+1	; 0x01
 280:	88 81       	ld	r24, Y
 282:	0e 94 9b 00 	call	0x136	; 0x136 <Gpio__PinConfig>
 286:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 288:	c0 17       	cp	r28, r16
 28a:	d1 07       	cpc	r29, r17
 28c:	b9 f7       	brne	.-18     	; 0x27c <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(ON);   //apaga todos leds
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 10 01 	call	0x220	; 0x220 <Hal__SetAllLeds>
	
	}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <Hal__ReadKey>:
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
unsigned char value;
value = Gpio__PinRead(KEYS_GPIO[key].port, KEYS_GPIO[key].pin);
 29e:	e8 2f       	mov	r30, r24
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ea 5f       	subi	r30, 0xFA	; 250
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	61 81       	ldd	r22, Z+1	; 0x01
 2ac:	80 81       	ld	r24, Z
 2ae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Gpio__PinRead>
return (value);
}
 2b2:	08 95       	ret

000002b4 <Display__Initialize>:
/**
 *  Inicializa variáveis referente ao estado inicial do forno e das chaves
 */
void Display__Initialize(void)
	{
	Oven_Display_State = OVEN_INIT;
 2b4:	84 e0       	ldi	r24, 0x04	; 4
 2b6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 2ba:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Display_Keys_Map>
 2be:	08 95       	ret

000002c0 <Display__SetState>:
 *  A função atualiza a variável global:
 *  Oven_Display_State que indica o estado do forno  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 2c0:	86 30       	cpi	r24, 0x06	; 6
 2c2:	10 f4       	brcc	.+4      	; 0x2c8 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 2c4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Oven_Display_State>
 2c8:	08 95       	ret

000002ca <UpdateDisplayLeds>:
 *   Atualiza os estados dos leds  
 */
void UpdateDisplayLeds(void)
{
	
	switch(Oven_Display_State)
 2ca:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Oven_Display_State>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <UpdateDisplayLeds+0x1c>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <UpdateDisplayLeds+0x14>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	a1 f0       	breq	.+40     	; 0x300 <UpdateDisplayLeds+0x36>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	f9 f0       	breq	.+62     	; 0x31a <UpdateDisplayLeds+0x50>
 2dc:	08 95       	ret
	{
	case OVEN_OFF:
	{
	       Hal__SetAllLeds(APAGA_LED);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 10 01 	call	0x220	; 0x220 <Hal__SetAllLeds>
		   break;
 2e4:	08 95       	ret
	   		
		break;

	case OVEN_MIN:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		break;
 2fe:	08 95       	ret
	}
	case OVEN_MED:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		break;
 318:	08 95       	ret
	}
	case OVEN_MAX:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 04 01 	call	0x208	; 0x208 <Hal__SetLed>
 332:	08 95       	ret

00000334 <ReadDisplayKeys>:
 *  Atualiza a variável global (Display_Keys_Map) das chaves
 *  chamando Hal_ReadKey()
 */
void ReadDisplayKeys(void)
{
	value1 = Hal__ReadKey(KEY_0);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 4f 01 	call	0x29e	; 0x29e <Hal__ReadKey>
 33a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <value1>
	value2 = Hal__ReadKey(KEY_1);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 4f 01 	call	0x29e	; 0x29e <Hal__ReadKey>
 344:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <value2>
	value3 = Hal__ReadKey(KEY_2);
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 4f 01 	call	0x29e	; 0x29e <Hal__ReadKey>
 34e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <value3>
		
	if (value1==0 && value3==0)
 352:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <value1>
 356:	91 11       	cpse	r25, r1
 358:	16 c0       	rjmp	.+44     	; 0x386 <ReadDisplayKeys+0x52>
 35a:	81 11       	cpse	r24, r1
 35c:	0c c0       	rjmp	.+24     	; 0x376 <ReadDisplayKeys+0x42>
	{
		Display_Keys_Map = KEY_OFF_EVENT;
 35e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Display_Keys_Map>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	83 ed       	ldi	r24, 0xD3	; 211
 366:	90 e3       	ldi	r25, 0x30	; 48
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <ReadDisplayKeys+0x34>
 370:	00 c0       	rjmp	.+0      	; 0x372 <ReadDisplayKeys+0x3e>
 372:	00 00       	nop
 374:	08 95       	ret
	}
	else
	{
		if(value1 == 0)    //reads key 1 (at SW1)
		{
			Display_Keys_Map = KEY_MIN_EVENT;
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Display_Keys_Map>
		}
		if(value2 == 0)           //reads key 2 (at SW2)
 37c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <value2>
 380:	99 23       	and	r25, r25
 382:	29 f0       	breq	.+10     	; 0x38e <ReadDisplayKeys+0x5a>
 384:	08 95       	ret
 386:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <value2>
 38a:	91 11       	cpse	r25, r1
 38c:	03 c0       	rjmp	.+6      	; 0x394 <ReadDisplayKeys+0x60>
		{
			Display_Keys_Map = KEY_MED_EVENT;
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Display_Keys_Map>
		}
		if(value3 == 0)   //reads key 3 (at SW3)
 394:	81 11       	cpse	r24, r1
 396:	03 c0       	rjmp	.+6      	; 0x39e <ReadDisplayKeys+0x6a>
		{
			Display_Keys_Map = KEY_MAX_EVENT;
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Display_Keys_Map>
 39e:	08 95       	ret

000003a0 <Display__Handler>:
/**
 *   Faz o display(leds) do estado do forno
 */
void Display__Handler(void)
	{
	ReadDisplayKeys();          // lê os Keys!
 3a0:	0e 94 9a 01 	call	0x334	; 0x334 <ReadDisplayKeys>
	
	#if (LED_DISPLAY == ENABLED)	
	UpdateDisplayLeds();        // atualização dos leds
 3a4:	0e 94 65 01 	call	0x2ca	; 0x2ca <UpdateDisplayLeds>
 3a8:	08 95       	ret

000003aa <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
 3aa:	0e 94 9a 01 	call	0x334	; 0x334 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
}
 3ae:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Display_Keys_Map>
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
