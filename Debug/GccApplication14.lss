
GccApplication14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800142  00800142  000006da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ad  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfb  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092b  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b9  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c3  00000000  00000000  00004071  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
}


void Appl__Handler(void)
{
User_Action = Display__GetEvent();
  ae:	0e 94 95 02 	call	0x52a	; 0x52a <Display__GetEvent>
  b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
		if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
		{
			switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	08 95       	ret
			{
			case KEY_OFF_EVENT:
				Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 3c 02 	call	0x478	; 0x478 <Display__SetState>
				break;
  d0:	08 95       	ret
				
			case KEY_MIN_EVENT:
			{
				Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 3c 02 	call	0x478	; 0x478 <Display__SetState>
				break;
  d8:	08 95       	ret
			}
				
			case KEY_MED_EVENT:
				Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 3c 02 	call	0x478	; 0x478 <Display__SetState>
				break;
  e0:	08 95       	ret
				
			case KEY_MAX_EVENT:
				Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 3c 02 	call	0x478	; 0x478 <Display__SetState>
  e8:	08 95       	ret

000000ea <main>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================

void main(void)
{
	Slot = SLOT_1;
  ea:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>

	// Functions Initialization
	INITIALIZE_TASKS();
  ee:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__Initialize>
  f2:	0e 94 36 02 	call	0x46c	; 0x46c <Display__Initialize>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>

			default:
			Slot = SLOT_1;
			break;
    		}
		Slot++;
  fa:	c1 e0       	ldi	r28, 0x01	; 1
	INITIALIZE_TASKS();
		
	//Main Loop
	for(;;)
	    {
		ALL_SLOTS_TASKS();  // ver no main_prm.h
  fc:	0e 94 00 02 	call	0x400	; 0x400 <Hal__FastHandler>
		switch(Slot)
 100:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Slot>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	39 f0       	breq	.+14     	; 0x116 <main+0x2c>
 108:	18 f0       	brcs	.+6      	; 0x110 <main+0x26>
 10a:	85 30       	cpi	r24, 0x05	; 5
 10c:	38 f4       	brcc	.+14     	; 0x11c <main+0x32>
 10e:	09 c0       	rjmp	.+18     	; 0x122 <main+0x38>
		    {
			case SLOT_1:
			SLOT_1_TASKS();
 110:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 114:	06 c0       	rjmp	.+12     	; 0x122 <main+0x38>

			case SLOT_2:
			SLOT_2_TASKS();
 116:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Display__Handler>
			break;
 11a:	03 c0       	rjmp	.+6      	; 0x122 <main+0x38>

			default:
			Slot = SLOT_1;
			break;
    		}
		Slot++;
 11c:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <Slot>
 120:	ed cf       	rjmp	.-38     	; 0xfc <main+0x12>
 122:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Slot>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 12c:	85 30       	cpi	r24, 0x05	; 5
 12e:	30 f3       	brcs	.-52     	; 0xfc <main+0x12>
		   	Slot = SLOT_1;
 130:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>
 134:	e3 cf       	rjmp	.-58     	; 0xfc <main+0x12>

00000136 <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	fb 01       	movw	r30, r22
 13a:	e2 5d       	subi	r30, 0xD2	; 210
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	31 f0       	breq	.+12     	; 0x150 <Gpio__PinConfig+0x1a>
 144:	18 f0       	brcs	.+6      	; 0x14c <Gpio__PinConfig+0x16>
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	29 f0       	breq	.+10     	; 0x154 <Gpio__PinConfig+0x1e>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 14c:	95 b1       	in	r25, 0x05	; 5
		break;
 14e:	03 c0       	rjmp	.+6      	; 0x156 <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
 150:	98 b1       	in	r25, 0x08	; 8
		break;
 152:	01 c0       	rjmp	.+2      	; 0x156 <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
 154:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	01 90       	ld	r0, Z+
 168:	f0 81       	ld	r31, Z
 16a:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 16c:	81 81       	ldd	r24, Z+1	; 0x01
 16e:	82 2b       	or	r24, r18
 170:	81 83       	std	Z+1, r24	; 0x01
 172:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 174:	41 11       	cpse	r20, r1
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 178:	e8 2f       	mov	r30, r24
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	01 90       	ld	r0, Z+
 186:	f0 81       	ld	r31, Z
 188:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 18a:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 18c:	db 01       	movw	r26, r22
 18e:	aa 5d       	subi	r26, 0xDA	; 218
 190:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 192:	9c 91       	ld	r25, X
 194:	98 23       	and	r25, r24
 196:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 198:	92 81       	ldd	r25, Z+2	; 0x02
 19a:	82 2f       	mov	r24, r18
 19c:	89 2b       	or	r24, r25
 19e:	82 83       	std	Z+2, r24	; 0x02
 1a0:	08 95       	ret

000001a2 <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 1a2:	41 11       	cpse	r20, r1
 1a4:	14 c0       	rjmp	.+40     	; 0x1ce <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 1a6:	e8 2f       	mov	r30, r24
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	e0 50       	subi	r30, 0x00	; 0
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	a0 81       	ld	r26, Z
 1b4:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 1b6:	12 96       	adiw	r26, 0x02	; 2
 1b8:	9c 91       	ld	r25, X
 1ba:	12 97       	sbiw	r26, 0x02	; 2
 1bc:	e6 2f       	mov	r30, r22
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ea 5d       	subi	r30, 0xDA	; 218
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
 1c6:	89 23       	and	r24, r25
 1c8:	12 96       	adiw	r26, 0x02	; 2
 1ca:	8c 93       	st	X, r24
 1cc:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 1ce:	e8 2f       	mov	r30, r24
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	a0 81       	ld	r26, Z
 1dc:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 1de:	12 96       	adiw	r26, 0x02	; 2
 1e0:	9c 91       	ld	r25, X
 1e2:	12 97       	sbiw	r26, 0x02	; 2
 1e4:	e6 2f       	mov	r30, r22
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e2 5d       	subi	r30, 0xD2	; 210
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	80 81       	ld	r24, Z
 1ee:	89 2b       	or	r24, r25
 1f0:	12 96       	adiw	r26, 0x02	; 2
 1f2:	8c 93       	st	X, r24
 1f4:	08 95       	ret

000001f6 <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 1f6:	e8 2f       	mov	r30, r24
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	01 90       	ld	r0, Z+
 204:	f0 81       	ld	r31, Z
 206:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 208:	90 81       	ld	r25, Z
 20a:	e6 2f       	mov	r30, r22
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	e2 5d       	subi	r30, 0xD2	; 210
 210:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 212:	80 81       	ld	r24, Z
 214:	98 23       	and	r25, r24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	09 f4       	brne	.+2      	; 0x21c <Gpio__PinRead+0x26>
 21a:	80 e0       	ldi	r24, 0x00	; 0
    
}
 21c:	08 95       	ret

0000021e <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 21e:	90 e0       	ldi	r25, 0x00	; 0
	if (value == ACENDE_LED)
 220:	66 23       	and	r22, r22
 222:	31 f0       	breq	.+12     	; 0x230 <Hal__SetLed+0x12>
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 224:	fc 01       	movw	r30, r24
 226:	e9 5b       	subi	r30, 0xB9	; 185
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	20 83       	st	Z, r18
 22e:	08 95       	ret
	if (value == ACENDE_LED)
	   Hal_Leds_Buffer[output] = LED_ON;
 230:	fc 01       	movw	r30, r24
 232:	e9 5b       	subi	r30, 0xB9	; 185
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	10 82       	st	Z, r1
 238:	08 95       	ret

0000023a <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
 23a:	e7 e4       	ldi	r30, 0x47	; 71
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	2b e4       	ldi	r18, 0x4B	; 75
 240:	31 e0       	ldi	r19, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 242:	91 e0       	ldi	r25, 0x01	; 1
		if (value == ACENDE_LED)
 244:	88 23       	and	r24, r24
 246:	11 f0       	breq	.+4      	; 0x24c <Hal__SetAllLeds+0x12>
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 248:	90 83       	st	Z, r25
 24a:	01 c0       	rjmp	.+2      	; 0x24e <Hal__SetAllLeds+0x14>
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
 24c:	10 82       	st	Z, r1
 24e:	31 96       	adiw	r30, 0x01	; 1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 250:	e2 17       	cp	r30, r18
 252:	f3 07       	cpc	r31, r19
 254:	b9 f7       	brne	.-18     	; 0x244 <Hal__SetAllLeds+0xa>
		{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
		}
}
 256:	08 95       	ret

00000258 <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ce e0       	ldi	r28, 0x0E	; 14
 262:	d1 e0       	ldi	r29, 0x01	; 1
 264:	06 e1       	ldi	r16, 0x16	; 22
 266:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	69 81       	ldd	r22, Y+1	; 0x01
 26c:	88 81       	ld	r24, Y
 26e:	0e 94 9b 00 	call	0x136	; 0x136 <Gpio__PinConfig>
 272:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	//ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 274:	c0 17       	cp	r28, r16
 276:	d1 07       	cpc	r29, r17
 278:	b9 f7       	brne	.-18     	; 0x268 <Hal__Initialize+0x10>
 27a:	c6 e0       	ldi	r28, 0x06	; 6
 27c:	d1 e0       	ldi	r29, 0x01	; 1
 27e:	0e e0       	ldi	r16, 0x0E	; 14
 280:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	69 81       	ldd	r22, Y+1	; 0x01
 286:	88 81       	ld	r24, Y
 288:	0e 94 9b 00 	call	0x136	; 0x136 <Gpio__PinConfig>
 28c:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 28e:	c0 17       	cp	r28, r16
 290:	d1 07       	cpc	r29, r17
 292:	b9 f7       	brne	.-18     	; 0x282 <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(ON);   //apaga todos leds
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
 29a:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
 29c:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
 29e:	20 9a       	sbi	0x04, 0	; 4
	
	
	//Gpio__PinConfig(PORTD, 4, OUTPUT_DIGITAL);
	//Gpio__PinConfig(PORTD, 7, OUTPUT_DIGITAL);
	//Gpio__PinConfig(PORTB, 0, OUTPUT_DIGITAL);
	}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
 2aa:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	70 f4       	brcc	.+28     	; 0x2cc <Hal__ReadKey+0x22>
	   {
	   if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
	      return (TRUE);
 2b0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Hal_Keys_Buffer>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a0 e0       	ldi	r26, 0x00	; 0
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <Hal__ReadKey+0x1a>
 2bc:	b6 95       	lsr	r27
 2be:	a7 95       	ror	r26
 2c0:	97 95       	ror	r25
 2c2:	87 95       	ror	r24
 2c4:	2a 95       	dec	r18
 2c6:	d2 f7       	brpl	.-12     	; 0x2bc <Hal__ReadKey+0x12>
 2c8:	81 70       	andi	r24, 0x01	; 1
 2ca:	08 95       	ret
	   }
	 return (FALSE);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
}
 2ce:	08 95       	ret

000002d0 <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char *Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
 2d0:	0e 94 05 02 	call	0x40a	; 0x40a <SevenSeg_WriteValueToSegment>
 2d4:	08 95       	ret

000002d6 <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ca e3       	ldi	r28, 0x3A	; 58
 2ec:	d1 e0       	ldi	r29, 0x01	; 1
 2ee:	0f 2e       	mov	r0, r31
 2f0:	f7 e4       	ldi	r31, 0x47	; 71
 2f2:	ef 2e       	mov	r14, r31
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	ff 2e       	mov	r15, r31
 2f8:	f0 2d       	mov	r31, r0
 2fa:	0e e0       	ldi	r16, 0x0E	; 14
 2fc:	11 e0       	ldi	r17, 0x01	; 1
 2fe:	0f 2e       	mov	r0, r31
 300:	fe e3       	ldi	r31, 0x3E	; 62
 302:	cf 2e       	mov	r12, r31
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	df 2e       	mov	r13, r31
 308:	f0 2d       	mov	r31, r0
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			   {  
				value = LED_OFF;
			   }
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 30a:	bb 24       	eor	r11, r11
 30c:	b3 94       	inc	r11
 30e:	a1 2c       	mov	r10, r1
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
	   {
		if(Leds_Enable_Table[index] == ENABLED) // Update GPIO only if current LED is configured to be used
 310:	89 91       	ld	r24, Y+
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	59 f4       	brne	.+22     	; 0x32c <LEDsUpdate+0x56>
 316:	f8 01       	movw	r30, r16
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			   {  
				value = LED_OFF;
			   }
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 318:	4b 2d       	mov	r20, r11
 31a:	d7 01       	movw	r26, r14
 31c:	8c 91       	ld	r24, X
 31e:	81 11       	cpse	r24, r1
 320:	01 c0       	rjmp	.+2      	; 0x324 <LEDsUpdate+0x4e>
 322:	4a 2d       	mov	r20, r10
 324:	61 81       	ldd	r22, Z+1	; 0x01
 326:	80 81       	ld	r24, Z
 328:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Gpio__PinWrite>
 32c:	bf ef       	ldi	r27, 0xFF	; 255
 32e:	eb 1a       	sub	r14, r27
 330:	fb 0a       	sbc	r15, r27
 332:	0e 5f       	subi	r16, 0xFE	; 254
 334:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
 336:	cc 15       	cp	r28, r12
 338:	dd 05       	cpc	r29, r13
 33a:	51 f7       	brne	.-44     	; 0x310 <LEDsUpdate+0x3a>
				value = LED_OFF;
			   }
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		    }
	   }
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	bf 90       	pop	r11
 34e:	af 90       	pop	r10
 350:	08 95       	ret

00000352 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
 352:	8f 92       	push	r8
 354:	9f 92       	push	r9
 356:	af 92       	push	r10
 358:	bf 92       	push	r11
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	0f 2e       	mov	r0, r31
 36a:	f6 e3       	ldi	r31, 0x36	; 54
 36c:	ef 2e       	mov	r14, r31
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	ff 2e       	mov	r15, r31
 372:	f0 2d       	mov	r31, r0
 374:	06 e0       	ldi	r16, 0x06	; 6
 376:	11 e0       	ldi	r17, 0x01	; 1
 378:	c0 e0       	ldi	r28, 0x00	; 0
 37a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 37c:	81 2c       	mov	r8, r1
 37e:	91 2c       	mov	r9, r1
 380:	54 01       	movw	r10, r8
 382:	83 94       	inc	r8
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
	{
		if(Keys_Enable_Table[key_index] == ENABLED)
 384:	f7 01       	movw	r30, r14
 386:	81 91       	ld	r24, Z+
 388:	7f 01       	movw	r14, r30
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	39 f5       	brne	.+78     	; 0x3dc <KeysRead+0x8a>
		{
			value = Gpio__PinRead(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
 38e:	f8 01       	movw	r30, r16
 390:	61 81       	ldd	r22, Z+1	; 0x01
 392:	80 81       	ld	r24, Z
 394:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Gpio__PinRead>
			if(value == KEY_PRESSED)
 398:	81 11       	cpse	r24, r1
 39a:	10 c0       	rjmp	.+32     	; 0x3bc <KeysRead+0x6a>
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
 39c:	d5 01       	movw	r26, r10
 39e:	c4 01       	movw	r24, r8
 3a0:	0c 2e       	mov	r0, r28
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <KeysRead+0x5a>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	aa 1f       	adc	r26, r26
 3aa:	bb 1f       	adc	r27, r27
 3ac:	0a 94       	dec	r0
 3ae:	d2 f7       	brpl	.-12     	; 0x3a4 <KeysRead+0x52>
 3b0:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <Hal_Keys_Buffer>
 3b4:	82 2b       	or	r24, r18
 3b6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Hal_Keys_Buffer>
 3ba:	10 c0       	rjmp	.+32     	; 0x3dc <KeysRead+0x8a>
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 3bc:	d5 01       	movw	r26, r10
 3be:	c4 01       	movw	r24, r8
 3c0:	0c 2e       	mov	r0, r28
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <KeysRead+0x7a>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	0a 94       	dec	r0
 3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <KeysRead+0x72>
 3d0:	80 95       	com	r24
 3d2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <Hal_Keys_Buffer>
 3d6:	89 23       	and	r24, r25
 3d8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Hal_Keys_Buffer>
 3dc:	21 96       	adiw	r28, 0x01	; 1
 3de:	0e 5f       	subi	r16, 0xFE	; 254
 3e0:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
 3e2:	c4 30       	cpi	r28, 0x04	; 4
 3e4:	d1 05       	cpc	r29, r1
 3e6:	71 f6       	brne	.-100    	; 0x384 <KeysRead+0x32>

			}
		}
	}

}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	bf 90       	pop	r11
 3f8:	af 90       	pop	r10
 3fa:	9f 90       	pop	r9
 3fc:	8f 90       	pop	r8
 3fe:	08 95       	ret

00000400 <Hal__FastHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...
 */
void Hal__FastHandler(void)
{
	LEDsUpdate();   // update the LEDs status
 400:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LEDsUpdate>
	KeysRead();     // reads the keys and update the Hal_Keys_Buffer
 404:	0e 94 a9 01 	call	0x352	; 0x352 <KeysRead>
 408:	08 95       	ret

0000040a <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char *Value)
{
 40a:	fb 01       	movw	r30, r22
	bitClear(PORTD, 4);
 40c:	5c 98       	cbi	0x0b, 4	; 11
 40e:	47 e0       	ldi	r20, 0x07	; 7
 410:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!((*Value) & (1 << (7 - i))));
 412:	20 81       	ld	r18, Z
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	04 2e       	mov	r0, r20
 418:	02 c0       	rjmp	.+4      	; 0x41e <SevenSeg_WriteValueToSegment+0x14>
 41a:	35 95       	asr	r19
 41c:	27 95       	ror	r18
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <SevenSeg_WriteValueToSegment+0x10>
 422:	20 ff       	sbrs	r18, 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <SevenSeg_WriteValueToSegment+0x20>
 426:	28 9a       	sbi	0x05, 0	; 5
 428:	01 c0       	rjmp	.+2      	; 0x42c <SevenSeg_WriteValueToSegment+0x22>
 42a:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 42c:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 42e:	5f 98       	cbi	0x0b, 7	; 11
 430:	41 50       	subi	r20, 0x01	; 1
 432:	51 09       	sbc	r21, r1
 434:	70 f7       	brcc	.-36     	; 0x412 <SevenSeg_WriteValueToSegment+0x8>
 436:	27 e0       	ldi	r18, 0x07	; 7
 438:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));
 43a:	e8 2f       	mov	r30, r24
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	e2 5c       	subi	r30, 0xC2	; 194
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	40 81       	ld	r20, Z
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	ca 01       	movw	r24, r20
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <SevenSeg_WriteValueToSegment+0x46>
 44c:	95 95       	asr	r25
 44e:	87 95       	ror	r24
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <SevenSeg_WriteValueToSegment+0x42>
 454:	80 ff       	sbrs	r24, 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <SevenSeg_WriteValueToSegment+0x52>
 458:	28 9a       	sbi	0x05, 0	; 5
 45a:	01 c0       	rjmp	.+2      	; 0x45e <SevenSeg_WriteValueToSegment+0x54>
 45c:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 45e:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 460:	5f 98       	cbi	0x0b, 7	; 11
 462:	21 50       	subi	r18, 0x01	; 1
 464:	31 09       	sbc	r19, r1
 466:	78 f7       	brcc	.-34     	; 0x446 <SevenSeg_WriteValueToSegment+0x3c>
	}

	bitSet(PORTD, 4);
 468:	5c 9a       	sbi	0x0b, 4	; 11
 46a:	08 95       	ret

0000046c <Display__Initialize>:
/**
 *  
 */
void Display__Initialize(void)
{
	Oven_Display_State = OVEN_INIT;
 46c:	84 e0       	ldi	r24, 0x04	; 4
 46e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 472:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Display_Keys_Map>
 476:	08 95       	ret

00000478 <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 478:	86 30       	cpi	r24, 0x06	; 6
 47a:	10 f4       	brcc	.+4      	; 0x480 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 47c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Oven_Display_State>
 480:	08 95       	ret

00000482 <UpdateDisplayLeds>:
 */
void UpdateDisplayLeds(void)
{
	char i;
	//char *p_digito;
	switch(Oven_Display_State)
 482:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Oven_Display_State>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	51 f0       	breq	.+20     	; 0x49e <UpdateDisplayLeds+0x1c>
 48a:	28 f0       	brcs	.+10     	; 0x496 <UpdateDisplayLeds+0x14>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	a1 f0       	breq	.+40     	; 0x4b8 <UpdateDisplayLeds+0x36>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	f9 f0       	breq	.+62     	; 0x4d2 <UpdateDisplayLeds+0x50>
 494:	08 95       	ret
	{
	case OVEN_OFF:
	      {
	       Hal__SetAllLeds(APAGA_LED);
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetAllLeds>
		   break;
 49c:	08 95       	ret
	case OVEN_INIT:
	case OVEN_TIMEOUT:
	   	break;
	case OVEN_MIN:
	    {
		Hal__SetLed(LED_0, ACENDE_LED);
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		break;
 4b6:	08 95       	ret
	    }
	case OVEN_MED:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		break;
 4d0:	08 95       	ret
	}
	case OVEN_MAX:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 0f 01 	call	0x21e	; 0x21e <Hal__SetLed>
 4ea:	08 95       	ret

000004ec <ReadDisplayKeys>:
void ReadDisplayKeys(void)
{
        unsigned char leitura;
        //Display_Keys_Map = KEY_NONE;
		
		leitura = Hal__ReadKey(KEY_0);
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 55 01 	call	0x2aa	; 0x2aa <Hal__ReadKey>
		if(leitura  == TRUE)
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	11 f4       	brne	.+4      	; 0x4fa <ReadDisplayKeys+0xe>
		     {
			Display_Keys_Map = KEY_MIN_EVENT;
 4f6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Display_Keys_Map>
			 }
		leitura = Hal__ReadKey(KEY_1);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 55 01 	call	0x2aa	; 0x2aa <Hal__ReadKey>
		if(leitura == TRUE)
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	19 f4       	brne	.+6      	; 0x50a <ReadDisplayKeys+0x1e>
		    {
			Display_Keys_Map = KEY_MED_EVENT;
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Display_Keys_Map>
			}
		leitura = Hal__ReadKey(KEY_2);
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 55 01 	call	0x2aa	; 0x2aa <Hal__ReadKey>
		if(leitura == TRUE)
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	19 f4       	brne	.+6      	; 0x51a <ReadDisplayKeys+0x2e>
		    {
			Display_Keys_Map =  KEY_MAX_EVENT;
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Display_Keys_Map>
			}
		leitura = Hal__ReadKey(KEY_3);
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	0e 94 55 01 	call	0x2aa	; 0x2aa <Hal__ReadKey>
		if(leitura == TRUE)
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	11 f4       	brne	.+4      	; 0x528 <ReadDisplayKeys+0x3c>
			{
			Display_Keys_Map =  KEY_OFF_EVENT; 
 524:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Display_Keys_Map>
 528:	08 95       	ret

0000052a <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
 52a:	0e 94 76 02 	call	0x4ec	; 0x4ec <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
	
}
 52e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Display_Keys_Map>
 532:	08 95       	ret

00000534 <UpdateDisplaySevenSeg>:
 */
void UpdateDisplaySevenSeg(void)
{
char i;
char *p_digito;
switch(Oven_Display_State)
 534:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Oven_Display_State>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	e1 f0       	breq	.+56     	; 0x574 <UpdateDisplaySevenSeg+0x40>
 53c:	30 f0       	brcs	.+12     	; 0x54a <UpdateDisplaySevenSeg+0x16>
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	71 f1       	breq	.+92     	; 0x59e <UpdateDisplaySevenSeg+0x6a>
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	09 f4       	brne	.+2      	; 0x548 <UpdateDisplaySevenSeg+0x14>
 546:	40 c0       	rjmp	.+128    	; 0x5c8 <UpdateDisplaySevenSeg+0x94>
 548:	08 95       	ret
	{
	case OVEN_OFF:
		{
		p_digito = &ZERADO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 54a:	62 e2       	ldi	r22, 0x22	; 34
 54c:	71 e0       	ldi	r23, 0x01	; 1
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 554:	63 e2       	ldi	r22, 0x23	; 35
 556:	71 e0       	ldi	r23, 0x01	; 1
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 55e:	64 e2       	ldi	r22, 0x24	; 36
 560:	71 e0       	ldi	r23, 0x01	; 1
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 568:	65 e2       	ldi	r22, 0x25	; 37
 56a:	71 e0       	ldi	r23, 0x01	; 1
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 572:	08 95       	ret
		//Hal__WriteValtoSegment(1, 0xC0);
		//Hal__WriteValtoSegment(2, 0x80);
		//Hal__WriteValtoSegment(3, 0xC0);
		p_digito = &MINIMO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 574:	6e e1       	ldi	r22, 0x1E	; 30
 576:	71 e0       	ldi	r23, 0x01	; 1
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 57e:	6f e1       	ldi	r22, 0x1F	; 31
 580:	71 e0       	ldi	r23, 0x01	; 1
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 588:	60 e2       	ldi	r22, 0x20	; 32
 58a:	71 e0       	ldi	r23, 0x01	; 1
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 592:	61 e2       	ldi	r22, 0x21	; 33
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 59c:	08 95       	ret
		//Hal__WriteValtoSegment(1, 0xA4);
		//Hal__WriteValtoSegment(2, 0x82);
		//Hal__WriteValtoSegment(3, 0xC0);
		p_digito = &MEDIO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 59e:	6a e1       	ldi	r22, 0x1A	; 26
 5a0:	71 e0       	ldi	r23, 0x01	; 1
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5a8:	6b e1       	ldi	r22, 0x1B	; 27
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5b2:	6c e1       	ldi	r22, 0x1C	; 28
 5b4:	71 e0       	ldi	r23, 0x01	; 1
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5bc:	6d e1       	ldi	r22, 0x1D	; 29
 5be:	71 e0       	ldi	r23, 0x01	; 1
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5c6:	08 95       	ret
		//Hal__WriteValtoSegment(1, 0xB0);
		//Hal__WriteValtoSegment(2, 0xA4);
		//Hal__WriteValtoSegment(3, 0xC0);
		p_digito = &MAXIMO_DIGITO;   // ou p_digito = &MAXIMO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 5c8:	66 e1       	ldi	r22, 0x16	; 22
 5ca:	71 e0       	ldi	r23, 0x01	; 1
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5d2:	67 e1       	ldi	r22, 0x17	; 23
 5d4:	71 e0       	ldi	r23, 0x01	; 1
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5dc:	68 e1       	ldi	r22, 0x18	; 24
 5de:	71 e0       	ldi	r23, 0x01	; 1
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5e6:	69 e1       	ldi	r22, 0x19	; 25
 5e8:	71 e0       	ldi	r23, 0x01	; 1
 5ea:	83 e0       	ldi	r24, 0x03	; 3
 5ec:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Hal__WriteValtoSegment>
 5f0:	08 95       	ret

000005f2 <Display__Handler>:
/**
 *  
 */
void Display__Handler(void)
{
ReadDisplayKeys();
 5f2:	0e 94 76 02 	call	0x4ec	; 0x4ec <ReadDisplayKeys>
	
#if (LED_DISPLAY == ENABLED)	
	UpdateDisplayLeds();
 5f6:	0e 94 41 02 	call	0x482	; 0x482 <UpdateDisplayLeds>
#endif	

#if (SEVEN_SEG_DISPLAY == ENABLED)
UpdateDisplaySevenSeg();
 5fa:	0e 94 9a 02 	call	0x534	; 0x534 <UpdateDisplaySevenSeg>
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
