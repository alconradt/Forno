
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800142  00800142  000006be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017dc  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1e  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a75  00000000  00000000  00002c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000036d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f0  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c3  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000048d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
}


void Appl__Handler(void)
{
User_Action = Display__GetEvent();
  ae:	0e 94 ed 02 	call	0x5da	; 0x5da <Display__GetEvent>
  b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
		if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
		{
			switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <Appl__Handler+0x3a>
			{
			case KEY_OFF_EVENT:
				Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 3e 02 	call	0x47c	; 0x47c <Display__SetState>
				break;
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <Appl__Handler+0x3a>
				
			case KEY_MIN_EVENT:
			{
				Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 3e 02 	call	0x47c	; 0x47c <Display__SetState>
				break;
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <Appl__Handler+0x3a>
			}
				
			case KEY_MED_EVENT:
				Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 3e 02 	call	0x47c	; 0x47c <Display__SetState>
				break;
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <Appl__Handler+0x3a>
				
			case KEY_MAX_EVENT:
				Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 3e 02 	call	0x47c	; 0x47c <Display__SetState>
			default:
				break;

			}
		}
Display__Handler();
  e8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Display__Handler>
  ec:	08 95       	ret

000000ee <main>:
{
	//#if (WATCHDOG_ENABLE == DISABLED)
	//DISABLE_WATCHDOG();
	//#endif //WATCHDOG_ENABLE
	//EnableInterrupts;
	Slot = SLOT_1;
  ee:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>
	//RTCSC_RTCLKS = 0x00;
	//RTCSC_RTCPS = SLOT_TIME;
	//#endif //USE_FIXED_TIME_SLOT
	
	// Functions Initialization
	INITIALIZE_TASKS();
  f2:	0e 94 5f 01 	call	0x2be	; 0x2be <Hal__Initialize>
  f6:	0e 94 38 02 	call	0x470	; 0x470 <Display__Initialize>
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
			default:
			Slot = SLOT_1;
			break;

		}
		Slot++;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
	{
		//#if (WATCHDOG_ENABLE == ENABLED)
		//RESET_WATCHDOG();	/* feeds the watch dog */
		//#endif //WATCHDOG_ENABLE
		
		ALL_SLOTS_TASKS();
 100:	0e 94 33 02 	call	0x466	; 0x466 <Hal__FastHandler>
		switch(Slot)
 104:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Slot>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	39 f0       	breq	.+14     	; 0x11a <main+0x2c>
 10c:	18 f0       	brcs	.+6      	; 0x114 <main+0x26>
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	38 f4       	brcc	.+14     	; 0x120 <main+0x32>
 112:	09 c0       	rjmp	.+18     	; 0x126 <main+0x38>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 114:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 118:	06 c0       	rjmp	.+12     	; 0x126 <main+0x38>

			case SLOT_2:
			SLOT_2_TASKS();
 11a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Display__Handler>
			break;
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x38>
			default:
			Slot = SLOT_1;
			break;

		}
		Slot++;
 120:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <Slot>
 124:	ed cf       	rjmp	.-38     	; 0x100 <main+0x12>
 126:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Slot>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	30 f3       	brcs	.-52     	; 0x100 <main+0x12>
		{
			Slot = SLOT_1;
 134:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>
 138:	e3 cf       	rjmp	.-58     	; 0x100 <main+0x12>

0000013a <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	fb 01       	movw	r30, r22
 13e:	e2 5d       	subi	r30, 0xD2	; 210
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	31 f0       	breq	.+12     	; 0x154 <Gpio__PinConfig+0x1a>
 148:	18 f0       	brcs	.+6      	; 0x150 <Gpio__PinConfig+0x16>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	29 f0       	breq	.+10     	; 0x158 <Gpio__PinConfig+0x1e>
 14e:	05 c0       	rjmp	.+10     	; 0x15a <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 150:	95 b1       	in	r25, 0x05	; 5
		break;
 152:	03 c0       	rjmp	.+6      	; 0x15a <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
 154:	98 b1       	in	r25, 0x08	; 8
		break;
 156:	01 c0       	rjmp	.+2      	; 0x15a <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
 158:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	69 f4       	brne	.+26     	; 0x178 <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	01 90       	ld	r0, Z+
 16c:	f0 81       	ld	r31, Z
 16e:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	82 2b       	or	r24, r18
 174:	81 83       	std	Z+1, r24	; 0x01
 176:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 178:	41 11       	cpse	r20, r1
 17a:	14 c0       	rjmp	.+40     	; 0x1a4 <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 17c:	e8 2f       	mov	r30, r24
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	01 90       	ld	r0, Z+
 18a:	f0 81       	ld	r31, Z
 18c:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 18e:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 190:	db 01       	movw	r26, r22
 192:	aa 5d       	subi	r26, 0xDA	; 218
 194:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 196:	9c 91       	ld	r25, X
 198:	98 23       	and	r25, r24
 19a:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 19c:	92 81       	ldd	r25, Z+2	; 0x02
 19e:	82 2f       	mov	r24, r18
 1a0:	89 2b       	or	r24, r25
 1a2:	82 83       	std	Z+2, r24	; 0x02
 1a4:	08 95       	ret

000001a6 <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 1a6:	41 11       	cpse	r20, r1
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 1aa:	e8 2f       	mov	r30, r24
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	e0 50       	subi	r30, 0x00	; 0
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	a0 81       	ld	r26, Z
 1b8:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	9c 91       	ld	r25, X
 1be:	12 97       	sbiw	r26, 0x02	; 2
 1c0:	e6 2f       	mov	r30, r22
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ea 5d       	subi	r30, 0xDA	; 218
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 81       	ld	r24, Z
 1ca:	89 23       	and	r24, r25
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8c 93       	st	X, r24
 1d0:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 1d2:	e8 2f       	mov	r30, r24
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	a0 81       	ld	r26, Z
 1e0:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 1e2:	12 96       	adiw	r26, 0x02	; 2
 1e4:	9c 91       	ld	r25, X
 1e6:	12 97       	sbiw	r26, 0x02	; 2
 1e8:	e6 2f       	mov	r30, r22
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e2 5d       	subi	r30, 0xD2	; 210
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	80 81       	ld	r24, Z
 1f2:	89 2b       	or	r24, r25
 1f4:	12 96       	adiw	r26, 0x02	; 2
 1f6:	8c 93       	st	X, r24
 1f8:	08 95       	ret

000001fa <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 50       	subi	r30, 0x00	; 0
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	01 90       	ld	r0, Z+
 208:	f0 81       	ld	r31, Z
 20a:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 20c:	90 81       	ld	r25, Z
 20e:	e6 2f       	mov	r30, r22
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	e2 5d       	subi	r30, 0xD2	; 210
 214:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 216:	80 81       	ld	r24, Z
 218:	98 23       	and	r25, r24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	09 f4       	brne	.+2      	; 0x220 <Gpio__PinRead+0x26>
 21e:	80 e0       	ldi	r24, 0x00	; 0
    
}
 220:	08 95       	ret

00000222 <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char *Value)
{
 222:	fb 01       	movw	r30, r22
	bitClear(PORTD, 4);
 224:	5c 98       	cbi	0x0b, 4	; 11
 226:	47 e0       	ldi	r20, 0x07	; 7
 228:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!((*Value) & (1 << (7 - i))));
 22a:	20 81       	ld	r18, Z
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	04 2e       	mov	r0, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <SevenSeg_WriteValueToSegment+0x14>
 232:	35 95       	asr	r19
 234:	27 95       	ror	r18
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <SevenSeg_WriteValueToSegment+0x10>
 23a:	20 ff       	sbrs	r18, 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <SevenSeg_WriteValueToSegment+0x20>
 23e:	28 9a       	sbi	0x05, 0	; 5
 240:	01 c0       	rjmp	.+2      	; 0x244 <SevenSeg_WriteValueToSegment+0x22>
 242:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 244:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 246:	5f 98       	cbi	0x0b, 7	; 11
 248:	41 50       	subi	r20, 0x01	; 1
 24a:	51 09       	sbc	r21, r1
 24c:	70 f7       	brcc	.-36     	; 0x22a <SevenSeg_WriteValueToSegment+0x8>
 24e:	27 e0       	ldi	r18, 0x07	; 7
 250:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));
 252:	e8 2f       	mov	r30, r24
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ea 5c       	subi	r30, 0xCA	; 202
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	40 81       	ld	r20, Z
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	ca 01       	movw	r24, r20
 260:	02 2e       	mov	r0, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <SevenSeg_WriteValueToSegment+0x46>
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <SevenSeg_WriteValueToSegment+0x42>
 26c:	80 ff       	sbrs	r24, 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <SevenSeg_WriteValueToSegment+0x52>
 270:	28 9a       	sbi	0x05, 0	; 5
 272:	01 c0       	rjmp	.+2      	; 0x276 <SevenSeg_WriteValueToSegment+0x54>
 274:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 276:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 278:	5f 98       	cbi	0x0b, 7	; 11
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	31 09       	sbc	r19, r1
 27e:	78 f7       	brcc	.-34     	; 0x25e <SevenSeg_WriteValueToSegment+0x3c>
	}

	bitSet(PORTD, 4);
 280:	5c 9a       	sbi	0x0b, 4	; 11
 282:	08 95       	ret

00000284 <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 284:	90 e0       	ldi	r25, 0x00	; 0
	if (value == ACENDE_LED)
 286:	66 23       	and	r22, r22
 288:	31 f0       	breq	.+12     	; 0x296 <Hal__SetLed+0x12>
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 28a:	fc 01       	movw	r30, r24
 28c:	e9 5b       	subi	r30, 0xB9	; 185
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	20 83       	st	Z, r18
 294:	08 95       	ret
	if (value == ACENDE_LED)
	   Hal_Leds_Buffer[output] = LED_ON;
 296:	fc 01       	movw	r30, r24
 298:	e9 5b       	subi	r30, 0xB9	; 185
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	10 82       	st	Z, r1
 29e:	08 95       	ret

000002a0 <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
 2a0:	e7 e4       	ldi	r30, 0x47	; 71
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	2b e4       	ldi	r18, 0x4B	; 75
 2a6:	31 e0       	ldi	r19, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 2a8:	91 e0       	ldi	r25, 0x01	; 1
		if (value == ACENDE_LED)
 2aa:	88 23       	and	r24, r24
 2ac:	11 f0       	breq	.+4      	; 0x2b2 <Hal__SetAllLeds+0x12>
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 2ae:	90 83       	st	Z, r25
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <Hal__SetAllLeds+0x14>
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
 2b2:	10 82       	st	Z, r1
 2b4:	31 96       	adiw	r30, 0x01	; 1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 2b6:	e2 17       	cp	r30, r18
 2b8:	f3 07       	cpc	r31, r19
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <Hal__SetAllLeds+0xa>
		{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
		}
}
 2bc:	08 95       	ret

000002be <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ce e0       	ldi	r28, 0x0E	; 14
 2c8:	d1 e0       	ldi	r29, 0x01	; 1
 2ca:	06 e1       	ldi	r16, 0x16	; 22
 2cc:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	69 81       	ldd	r22, Y+1	; 0x01
 2d2:	88 81       	ld	r24, Y
 2d4:	0e 94 9d 00 	call	0x13a	; 0x13a <Gpio__PinConfig>
 2d8:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	//ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 2da:	c0 17       	cp	r28, r16
 2dc:	d1 07       	cpc	r29, r17
 2de:	b9 f7       	brne	.-18     	; 0x2ce <Hal__Initialize+0x10>
 2e0:	c6 e0       	ldi	r28, 0x06	; 6
 2e2:	d1 e0       	ldi	r29, 0x01	; 1
 2e4:	0e e0       	ldi	r16, 0x0E	; 14
 2e6:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	69 81       	ldd	r22, Y+1	; 0x01
 2ec:	88 81       	ld	r24, Y
 2ee:	0e 94 9d 00 	call	0x13a	; 0x13a <Gpio__PinConfig>
 2f2:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 2f4:	c0 17       	cp	r28, r16
 2f6:	d1 07       	cpc	r29, r17
 2f8:	b9 f7       	brne	.-18     	; 0x2e8 <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(ON);   //apaga todos leds
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
 300:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
 302:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
 304:	20 9a       	sbi	0x04, 0	; 4
	
	
	//Gpio__PinConfig(PORTD, 4, OUTPUT_DIGITAL);
	//Gpio__PinConfig(PORTD, 7, OUTPUT_DIGITAL);
	//Gpio__PinConfig(PORTB, 0, OUTPUT_DIGITAL);
	}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
 310:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	70 f4       	brcc	.+28     	; 0x332 <Hal__ReadKey+0x22>
	   {
	   if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
	      return (TRUE);
 316:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Hal_Keys_Buffer>
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	04 c0       	rjmp	.+8      	; 0x32a <Hal__ReadKey+0x1a>
 322:	b6 95       	lsr	r27
 324:	a7 95       	ror	r26
 326:	97 95       	ror	r25
 328:	87 95       	ror	r24
 32a:	2a 95       	dec	r18
 32c:	d2 f7       	brpl	.-12     	; 0x322 <Hal__ReadKey+0x12>
 32e:	81 70       	andi	r24, 0x01	; 1
 330:	08 95       	ret
	   }
	 return (FALSE);
 332:	80 e0       	ldi	r24, 0x00	; 0
}
 334:	08 95       	ret

00000336 <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char *Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
 336:	0e 94 11 01 	call	0x222	; 0x222 <SevenSeg_WriteValueToSegment>
 33a:	08 95       	ret

0000033c <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
 33c:	af 92       	push	r10
 33e:	bf 92       	push	r11
 340:	cf 92       	push	r12
 342:	df 92       	push	r13
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ce e3       	ldi	r28, 0x3E	; 62
 352:	d1 e0       	ldi	r29, 0x01	; 1
 354:	0f 2e       	mov	r0, r31
 356:	f7 e4       	ldi	r31, 0x47	; 71
 358:	ef 2e       	mov	r14, r31
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	ff 2e       	mov	r15, r31
 35e:	f0 2d       	mov	r31, r0
 360:	0e e0       	ldi	r16, 0x0E	; 14
 362:	11 e0       	ldi	r17, 0x01	; 1
 364:	0f 2e       	mov	r0, r31
 366:	f2 e4       	ldi	r31, 0x42	; 66
 368:	cf 2e       	mov	r12, r31
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	df 2e       	mov	r13, r31
 36e:	f0 2d       	mov	r31, r0
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 370:	bb 24       	eor	r11, r11
 372:	b3 94       	inc	r11
 374:	a1 2c       	mov	r10, r1
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		if(Leds_Enable_Table[index] == ENABLED) // Update GPIO only if current LED is configured to be used
 376:	89 91       	ld	r24, Y+
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	59 f4       	brne	.+22     	; 0x392 <LEDsUpdate+0x56>
 37c:	f8 01       	movw	r30, r16
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 37e:	4b 2d       	mov	r20, r11
 380:	d7 01       	movw	r26, r14
 382:	8c 91       	ld	r24, X
 384:	81 11       	cpse	r24, r1
 386:	01 c0       	rjmp	.+2      	; 0x38a <LEDsUpdate+0x4e>
 388:	4a 2d       	mov	r20, r10
 38a:	61 81       	ldd	r22, Z+1	; 0x01
 38c:	80 81       	ld	r24, Z
 38e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Gpio__PinWrite>
 392:	bf ef       	ldi	r27, 0xFF	; 255
 394:	eb 1a       	sub	r14, r27
 396:	fb 0a       	sbc	r15, r27
 398:	0e 5f       	subi	r16, 0xFE	; 254
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
 39c:	cc 15       	cp	r28, r12
 39e:	dd 05       	cpc	r29, r13
 3a0:	51 f7       	brne	.-44     	; 0x376 <LEDsUpdate+0x3a>
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		}
	}
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	bf 90       	pop	r11
 3b4:	af 90       	pop	r10
 3b6:	08 95       	ret

000003b8 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
 3b8:	8f 92       	push	r8
 3ba:	9f 92       	push	r9
 3bc:	af 92       	push	r10
 3be:	bf 92       	push	r11
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	0f 2e       	mov	r0, r31
 3d0:	fa e3       	ldi	r31, 0x3A	; 58
 3d2:	ef 2e       	mov	r14, r31
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	ff 2e       	mov	r15, r31
 3d8:	f0 2d       	mov	r31, r0
 3da:	06 e0       	ldi	r16, 0x06	; 6
 3dc:	11 e0       	ldi	r17, 0x01	; 1
 3de:	c0 e0       	ldi	r28, 0x00	; 0
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 3e2:	81 2c       	mov	r8, r1
 3e4:	91 2c       	mov	r9, r1
 3e6:	54 01       	movw	r10, r8
 3e8:	83 94       	inc	r8
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
	{
		if(Keys_Enable_Table[key_index] == ENABLED)
 3ea:	f7 01       	movw	r30, r14
 3ec:	81 91       	ld	r24, Z+
 3ee:	7f 01       	movw	r14, r30
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	39 f5       	brne	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			value = Gpio__PinRead(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
 3f4:	f8 01       	movw	r30, r16
 3f6:	61 81       	ldd	r22, Z+1	; 0x01
 3f8:	80 81       	ld	r24, Z
 3fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Gpio__PinRead>
			if(value == KEY_PRESSED)
 3fe:	81 11       	cpse	r24, r1
 400:	10 c0       	rjmp	.+32     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
 402:	d5 01       	movw	r26, r10
 404:	c4 01       	movw	r24, r8
 406:	0c 2e       	mov	r0, r28
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	aa 1f       	adc	r26, r26
 410:	bb 1f       	adc	r27, r27
 412:	0a 94       	dec	r0
 414:	d2 f7       	brpl	.-12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 416:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <Hal_Keys_Buffer>
 41a:	82 2b       	or	r24, r18
 41c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Hal_Keys_Buffer>
 420:	10 c0       	rjmp	.+32     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 422:	d5 01       	movw	r26, r10
 424:	c4 01       	movw	r24, r8
 426:	0c 2e       	mov	r0, r28
 428:	04 c0       	rjmp	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	0a 94       	dec	r0
 434:	d2 f7       	brpl	.-12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 436:	80 95       	com	r24
 438:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <Hal_Keys_Buffer>
 43c:	89 23       	and	r24, r25
 43e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Hal_Keys_Buffer>
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	0e 5f       	subi	r16, 0xFE	; 254
 446:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
 448:	c4 30       	cpi	r28, 0x04	; 4
 44a:	d1 05       	cpc	r29, r1
 44c:	71 f6       	brne	.-100    	; 0x3ea <KeysRead+0x32>

			}
		}
	}

}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	df 90       	pop	r13
 45c:	bf 90       	pop	r11
 45e:	af 90       	pop	r10
 460:	9f 90       	pop	r9
 462:	8f 90       	pop	r8
 464:	08 95       	ret

00000466 <Hal__FastHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...
 */
void Hal__FastHandler(void)
{
	LEDsUpdate();
 466:	0e 94 9e 01 	call	0x33c	; 0x33c <LEDsUpdate>
	KeysRead();
 46a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <KeysRead>
 46e:	08 95       	ret

00000470 <Display__Initialize>:
/**
 *  
 */
void Display__Initialize(void)
{
	Oven_Display_State = OVEN_INIT;
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 476:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Display_Keys_Map>
 47a:	08 95       	ret

0000047c <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 47c:	86 30       	cpi	r24, 0x06	; 6
 47e:	10 f4       	brcc	.+4      	; 0x484 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 480:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Oven_Display_State>
 484:	08 95       	ret

00000486 <UpdateDisplayLeds>:
	//{
	//	Hal__SetLed(index, 1);    //apaga os leds 
	//}
	
	
	switch(Oven_Display_State)
 486:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Oven_Display_State>
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	f9 f0       	breq	.+62     	; 0x4cc <UpdateDisplayLeds+0x46>
 48e:	30 f0       	brcs	.+12     	; 0x49c <UpdateDisplayLeds+0x16>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	e9 f1       	breq	.+122    	; 0x50e <UpdateDisplayLeds+0x88>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	09 f4       	brne	.+2      	; 0x49a <UpdateDisplayLeds+0x14>
 498:	5b c0       	rjmp	.+182    	; 0x550 <UpdateDisplayLeds+0xca>
 49a:	08 95       	ret
	{
	case OVEN_INIT:
	case OVEN_TIMEOUT:
		break;	
	case OVEN_OFF:
	     Hal__SetAllLeds(APAGA_LED);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Hal__SetAllLeds>
		 p_digito = &ZERADO_DIGITO[0];
		 for (i = 0; i< NUM_OF_DIGITOS; i++, p_digito++)
		    Hal__WriteValtoSegment(i, p_digito);
 4a2:	62 e2       	ldi	r22, 0x22	; 34
 4a4:	71 e0       	ldi	r23, 0x01	; 1
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 4ac:	63 e2       	ldi	r22, 0x23	; 35
 4ae:	71 e0       	ldi	r23, 0x01	; 1
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 4b6:	64 e2       	ldi	r22, 0x24	; 36
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 4c0:	65 e2       	ldi	r22, 0x25	; 37
 4c2:	71 e0       	ldi	r23, 0x01	; 1
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 4ca:	08 95       	ret
		 break;
	

	case OVEN_MIN:
		Hal__SetLed(LED_0, ACENDE_LED);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		p_digito = &MINIMO_DIGITO[0];
		for (i = 0; i< NUM_OF_DIGITOS; i++, p_digito++)
		   Hal__WriteValtoSegment(i, p_digito);
 4e4:	6e e1       	ldi	r22, 0x1E	; 30
 4e6:	71 e0       	ldi	r23, 0x01	; 1
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 4ee:	6f e1       	ldi	r22, 0x1F	; 31
 4f0:	71 e0       	ldi	r23, 0x01	; 1
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 4f8:	60 e2       	ldi	r22, 0x20	; 32
 4fa:	71 e0       	ldi	r23, 0x01	; 1
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 502:	61 e2       	ldi	r22, 0x21	; 33
 504:	71 e0       	ldi	r23, 0x01	; 1
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 50c:	08 95       	ret
		break;

	case OVEN_MED:
		Hal__SetLed(LED_0, ACENDE_LED);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		p_digito = &MEDIO_DIGITO[0];
		for (i = 0; i< NUM_OF_DIGITOS; i++, p_digito++)
		   Hal__WriteValtoSegment(i, p_digito);
 526:	6a e1       	ldi	r22, 0x1A	; 26
 528:	71 e0       	ldi	r23, 0x01	; 1
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 530:	6b e1       	ldi	r22, 0x1B	; 27
 532:	71 e0       	ldi	r23, 0x01	; 1
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 53a:	6c e1       	ldi	r22, 0x1C	; 28
 53c:	71 e0       	ldi	r23, 0x01	; 1
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 544:	6d e1       	ldi	r22, 0x1D	; 29
 546:	71 e0       	ldi	r23, 0x01	; 1
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 54e:	08 95       	ret
		break;

	case OVEN_MAX:
		Hal__SetLed(LED_0, ACENDE_LED);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 42 01 	call	0x284	; 0x284 <Hal__SetLed>
		p_digito = &MAXIMO_DIGITO[0];
		for (i = 0; i< NUM_OF_DIGITOS; i++, p_digito++)
		   Hal__WriteValtoSegment(i, p_digito);
 568:	66 e1       	ldi	r22, 0x16	; 22
 56a:	71 e0       	ldi	r23, 0x01	; 1
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 572:	67 e1       	ldi	r22, 0x17	; 23
 574:	71 e0       	ldi	r23, 0x01	; 1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 57c:	68 e1       	ldi	r22, 0x18	; 24
 57e:	71 e0       	ldi	r23, 0x01	; 1
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 586:	69 e1       	ldi	r22, 0x19	; 25
 588:	71 e0       	ldi	r23, 0x01	; 1
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	0e 94 9b 01 	call	0x336	; 0x336 <Hal__WriteValtoSegment>
 590:	08 95       	ret

00000592 <ReadDisplayKeys>:
void ReadDisplayKeys(void)
{
        unsigned char leitura;
        //Display_Keys_Map = KEY_NONE;
		
		leitura = Hal__ReadKey(KEY_0);
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 88 01 	call	0x310	; 0x310 <Hal__ReadKey>
		if(leitura  == TRUE)
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	11 f4       	brne	.+4      	; 0x5a0 <ReadDisplayKeys+0xe>
		     {
			Display_Keys_Map = KEY_MIN_EVENT;
 59c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Display_Keys_Map>
			 }
		leitura = Hal__ReadKey(KEY_1);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 88 01 	call	0x310	; 0x310 <Hal__ReadKey>
		if(leitura == TRUE)
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <ReadDisplayKeys+0x1e>
		    {
			Display_Keys_Map = KEY_MED_EVENT;
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Display_Keys_Map>
			}
		leitura = Hal__ReadKey(KEY_2);
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 88 01 	call	0x310	; 0x310 <Hal__ReadKey>
		if(leitura == TRUE)
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	19 f4       	brne	.+6      	; 0x5c0 <ReadDisplayKeys+0x2e>
		    {
			Display_Keys_Map =  KEY_MAX_EVENT;
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Display_Keys_Map>
			}
		leitura = Hal__ReadKey(KEY_3);
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	0e 94 88 01 	call	0x310	; 0x310 <Hal__ReadKey>
		if(leitura == TRUE)
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	11 f4       	brne	.+4      	; 0x5ce <ReadDisplayKeys+0x3c>
			{
			Display_Keys_Map =  KEY_OFF_EVENT; 
 5ca:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Display_Keys_Map>
 5ce:	08 95       	ret

000005d0 <Display__Handler>:
/**
 *  
 */
void Display__Handler(void)
{
ReadDisplayKeys();
 5d0:	0e 94 c9 02 	call	0x592	; 0x592 <ReadDisplayKeys>
	
#if (LED_DISPLAY == ENABLED)	
	UpdateDisplayLeds();
 5d4:	0e 94 43 02 	call	0x486	; 0x486 <UpdateDisplayLeds>
 5d8:	08 95       	ret

000005da <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
 5da:	0e 94 c9 02 	call	0x592	; 0x592 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
	
}
 5de:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Display_Keys_Map>
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
