
LAB2_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  0000095e  000009f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  0080015a  0080015a  00000a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f8  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da9  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c51  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00004740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d29  00000000  00000000  00004a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  0000575d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e5       	ldi	r26, 0x5A	; 90
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3a       	cpi	r26, 0xA1	; 161
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:

void Appl__Handler(void)
{//unsigned short int ad_value;
	
#if (EXP_OVEN == ENABLED)	
	    User_Action = Display__GetEvent();
  ae:	0e 94 42 04 	call	0x884	; 0x884 <Display__GetEvent>
  b2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
		if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
		    {
			switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <Appl__Handler+0x3a>
			    {
			    case KEY_OFF_EVENT:
				   Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 bc 03 	call	0x778	; 0x778 <Display__SetState>
				   break;
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <Appl__Handler+0x3a>
				
			    case KEY_MIN_EVENT:
			          Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 bc 03 	call	0x778	; 0x778 <Display__SetState>
				      break;
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <Appl__Handler+0x3a>
							
				 case KEY_MED_EVENT:
					  Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 bc 03 	call	0x778	; 0x778 <Display__SetState>
					  break;
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <Appl__Handler+0x3a>
				
			     case KEY_MAX_EVENT:
				      Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 bc 03 	call	0x778	; 0x778 <Display__SetState>
			     default:
				    break;

			}
		}
Display__Handler();
  e8:	0e 94 a6 04 	call	0x94c	; 0x94c <Display__Handler>
  ec:	08 95       	ret

000000ee <main>:
{
	//#if (WATCHDOG_ENABLE == DISABLED)
	//DISABLE_WATCHDOG();
	//#endif //WATCHDOG_ENABLE
	//EnableInterrupts;
	Slot = SLOT_1;
  ee:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <Slot>
	//RTCSC_RTCLKS = 0x00;
	//RTCSC_RTCPS = SLOT_TIME;
	//#endif //USE_FIXED_TIME_SLOT
	
	// Functions Initialization
	INITIALIZE_TASKS();
  f2:	0e 94 05 02 	call	0x40a	; 0x40a <Hal__Initialize>
  f6:	0e 94 b6 03 	call	0x76c	; 0x76c <Display__Initialize>
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
  fe:	0e 94 a8 00 	call	0x150	; 0x150 <ADC__Initialize>
			default:
			Slot = SLOT_1;
			break;

		}
		Slot++;
 102:	c1 e0       	ldi	r28, 0x01	; 1
	{
		//#if (WATCHDOG_ENABLE == ENABLED)
		//RESET_WATCHDOG();	/* feeds the watch dog */
		//#endif //WATCHDOG_ENABLE
		
		ALL_SLOTS_TASKS();
 104:	0e 94 09 03 	call	0x612	; 0x612 <Hal__FastHandler>
 108:	0e 94 82 03 	call	0x704	; 0x704 <Hal__BackgroundHandler>
		switch(Slot)
 10c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Slot>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	71 f0       	breq	.+28     	; 0x130 <main+0x42>
 114:	28 f4       	brcc	.+10     	; 0x120 <main+0x32>
 116:	88 23       	and	r24, r24
 118:	89 f0       	breq	.+34     	; 0x13c <main+0x4e>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	21 f0       	breq	.+8      	; 0x126 <main+0x38>
 11e:	0b c0       	rjmp	.+22     	; 0x136 <main+0x48>
 120:	85 30       	cpi	r24, 0x05	; 5
 122:	48 f4       	brcc	.+18     	; 0x136 <main+0x48>
 124:	0b c0       	rjmp	.+22     	; 0x13c <main+0x4e>
			case SLOT_1:
			SLOT_1_TASKS();
			break;

			case SLOT_2:
			SLOT_2_TASKS();
 126:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
 12a:	0e 94 a6 04 	call	0x94c	; 0x94c <Display__Handler>
			break;
 12e:	06 c0       	rjmp	.+12     	; 0x13c <main+0x4e>

			case SLOT_3:
			SLOT_3_TASKS();
 130:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ADC__Handler>
			break;
 134:	03 c0       	rjmp	.+6      	; 0x13c <main+0x4e>
			default:
			Slot = SLOT_1;
			break;

		}
		Slot++;
 136:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <Slot>
 13a:	e4 cf       	rjmp	.-56     	; 0x104 <main+0x16>
 13c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Slot>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 146:	85 30       	cpi	r24, 0x05	; 5
 148:	e8 f2       	brcs	.-70     	; 0x104 <main+0x16>
		{
			Slot = SLOT_1;
 14a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <Slot>
 14e:	da cf       	rjmp	.-76     	; 0x104 <main+0x16>

00000150 <ADC__Initialize>:
// Esta função configura somente os pinos de digital para analogico e inicializa o ADC_Buffer[]

// ********************************** 
 
void ADC__Initialize(void)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
	volatile ADC_REG_TYPE *adc_pt;   // tipo definido no micro.h
	adc_pt = ADC_REGISTERS;          // adc_pt aponta par ao inicio dos regs do ADC ($000078)
	
	

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
 154:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Adc_Step>
	Sampling_Time = 0;
 158:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Sampling_Time>
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
 15c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 160:	cf e5       	ldi	r28, 0x5F	; 95
 162:	d1 e0       	ldi	r29, 0x01	; 1
 164:	6c e2       	ldi	r22, 0x2C	; 44
 166:	71 e0       	ldi	r23, 0x01	; 1
 168:	e6 e2       	ldi	r30, 0x26	; 38
 16a:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
 16c:	80 e0       	ldi	r24, 0x00	; 0
		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
 16e:	28 e7       	ldi	r18, 0x78	; 120
 170:	30 e0       	ldi	r19, 0x00	; 0
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
	 {
		ADC_Buffer[channel] = 0;
 172:	19 92       	st	Y+, r1
 174:	19 92       	st	Y+, r1

		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
 176:	db 01       	movw	r26, r22
 178:	9d 91       	ld	r25, X+
 17a:	bd 01       	movw	r22, r26
 17c:	91 30       	cpi	r25, 0x01	; 1
 17e:	51 f4       	brne	.+20     	; 0x194 <ADC__Initialize+0x44>
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
 180:	86 30       	cpi	r24, 0x06	; 6
 182:	40 f4       	brcc	.+16     	; 0x194 <ADC__Initialize+0x44>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
 184:	d9 01       	movw	r26, r18
 186:	16 96       	adiw	r26, 0x06	; 6
 188:	4c 91       	ld	r20, X
 18a:	16 97       	sbiw	r26, 0x06	; 6
 18c:	90 81       	ld	r25, Z
 18e:	94 2b       	or	r25, r20
 190:	16 96       	adiw	r26, 0x06	; 6
 192:	9c 93       	st	X, r25

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	31 96       	adiw	r30, 0x01	; 1
 198:	86 30       	cpi	r24, 0x06	; 6
 19a:	59 f7       	brne	.-42     	; 0x172 <ADC__Initialize+0x22>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
			   }
		}
	 }  
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <ADC__Handler>:
	unsigned short int value, value_high;
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	

	switch(Adc_Step)
 1a2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <Adc_Step>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	81 f1       	breq	.+96     	; 0x20a <ADC__Handler+0x68>
 1aa:	28 f4       	brcc	.+10     	; 0x1b6 <ADC__Handler+0x14>
 1ac:	88 23       	and	r24, r24
 1ae:	41 f0       	breq	.+16     	; 0x1c0 <ADC__Handler+0x1e>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	f9 f0       	breq	.+62     	; 0x1f2 <ADC__Handler+0x50>
 1b4:	5f c0       	rjmp	.+190    	; 0x274 <ADC__Handler+0xd2>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	c1 f1       	breq	.+112    	; 0x22a <ADC__Handler+0x88>
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	f1 f1       	breq	.+124    	; 0x23a <ADC__Handler+0x98>
 1be:	5a c0       	rjmp	.+180    	; 0x274 <ADC__Handler+0xd2>
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
 1c0:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Adc_Channel>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <ADC__Handler+0x2e>
	

	switch(Adc_Step)
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
 1ca:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Adc_Channel>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <ADC__Handler+0x32>
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
		{
			Adc_Channel = AD_CH0;  // varre constantemente todas os canais
 1d0:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <Adc_Channel>
		}

		if(Adc_Enable_Table[Adc_Channel] == ENABLED)			// Checks if current channel is enabled
 1d4:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Adc_Channel>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e4 5d       	subi	r30, 0xD4	; 212
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	80 81       	ld	r24, Z
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <ADC__Handler+0x44>
 1e4:	49 c0       	rjmp	.+146    	; 0x278 <ADC__Handler+0xd6>
		{
			Adc_Step = ADC_STEP_SAMPLING;
 1e6:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Adc_Step>
			Sampling_Time = ADC_SAMPLING_TIME;
 1ea:	82 e3       	ldi	r24, 0x32	; 50
 1ec:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <Sampling_Time>
 1f0:	08 95       	ret
		}
		break;

	case ADC_STEP_SAMPLING:
		if(Sampling_Time)
 1f2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Sampling_Time>
 1f6:	88 23       	and	r24, r24
 1f8:	21 f0       	breq	.+8      	; 0x202 <ADC__Handler+0x60>
		{
			Sampling_Time--;
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <Sampling_Time>
 200:	08 95       	ret
		}
		else
		{
			Adc_Step = ADC_STEP_CONFIG_CHANNEL;	
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Adc_Step>
 208:	08 95       	ret
		}
		break;

	case ADC_STEP_CONFIG_CHANNEL:
	    adc_pt->ADMUX_REG.byte |= (unsigned char)Adc_Channel;	// Configures the channel be read
 20a:	e8 e7       	ldi	r30, 0x78	; 120
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	94 81       	ldd	r25, Z+4	; 0x04
 210:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Adc_Channel>
 214:	89 2b       	or	r24, r25
 216:	84 83       	std	Z+4, r24	; 0x04
		// ADC habilitado, sem auto trigger, sem interrupção, prescaler 128
		adc_pt->ADCSRA_REG.byte =  0x87; 
 218:	87 e8       	ldi	r24, 0x87	; 135
 21a:	82 83       	std	Z+2, r24	; 0x02
		// INICIA conversão
		adc_pt->ADCSRA_REG.bit.bit6  = 1;    //seta bit 6 (ADSC)
 21c:	82 81       	ldd	r24, Z+2	; 0x02
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	82 83       	std	Z+2, r24	; 0x02
		Adc_Step = ADC_STEP_WAIT_CONVERSION;					// Set next step
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Adc_Step>
		break;
 228:	08 95       	ret
		
	case ADC_STEP_WAIT_CONVERSION:
		if(adc_pt->ADCSRA_REG.bit.bit6 == 0)	// Wait until conversion be completed
 22a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 22e:	86 fd       	sbrc	r24, 6
 230:	23 c0       	rjmp	.+70     	; 0x278 <ADC__Handler+0xd6>
		   	Adc_Step = ADC_STEP_READ_RESULT;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Adc_Step>
 238:	08 95       	ret
		break;

	case ADC_STEP_READ_RESULT:  // AQUI é feita a leitura do ADC físico!!!
	    if(adc_pt->ADMUX_REG.bit.bit5 == 1)   //8 bits
 23a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 23e:	85 ff       	sbrs	r24, 5
 240:	03 c0       	rjmp	.+6      	; 0x248 <ADC__Handler+0xa6>
		   {
			value = (unsigned short int)((adc_pt->ADCH_REG.byte)& LO_BYTE_MASK); // 8 bits   
 242:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 246:	30 e0       	ldi	r19, 0x00	; 0
		   }
		if(adc_pt->ADMUX_REG.bit.bit5 == 0)    // 10 bits
 248:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 24c:	85 fd       	sbrc	r24, 5
 24e:	06 c0       	rjmp	.+12     	; 0x25c <ADC__Handler+0xba>
		   {
			value = (unsigned short int)((adc_pt->ADCL_REG.byte)& LO_BYTE_MASK);
 250:	e8 e7       	ldi	r30, 0x78	; 120
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	20 81       	ld	r18, Z
			value_high = (unsigned short int)(adc_pt->ADCH_REG.byte <<8); 
 256:	81 81       	ldd	r24, Z+1	; 0x01
			value |= value_high;	// Reads the conversion result bytes  
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	38 2b       	or	r19, r24
		   }

		ADC_Buffer[Adc_Channel] = value;  // A leitura do ADC é colocado no buffer ADC_Buffer do respectivo canal.
 25c:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Adc_Channel>
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	e1 5a       	subi	r30, 0xA1	; 161
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	31 83       	std	Z+1, r19	; 0x01
 26c:	20 83       	st	Z, r18
		Adc_Step = ADC_STEP_INIT;
 26e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Adc_Step>
		
		   //if (value >= 127)
		    //Hal__SetLed(LED_3, 0); //liga LED4
		  //else
		    //Hal__SetLed(LED_3, 1); //desliga LED4
	 	 break;
 272:	08 95       	ret

	default:
		Adc_Step = ADC_STEP_INIT;
 274:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Adc_Step>
 278:	08 95       	ret

0000027a <ADC__ConfigModes>:
{
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	
	 	// seleção da tensão de referencia:
	adc_pt->ADMUX_REG.bit.bit7 = 0;   //tensão de referencia 5V
 27a:	e8 e7       	ldi	r30, 0x78	; 120
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	94 81       	ldd	r25, Z+4	; 0x04
 280:	9f 77       	andi	r25, 0x7F	; 127
 282:	94 83       	std	Z+4, r25	; 0x04
	adc_pt->ADMUX_REG.bit.bit6 = 1;   //tensão de referencia 5V
 284:	94 81       	ldd	r25, Z+4	; 0x04
 286:	90 64       	ori	r25, 0x40	; 64
 288:	94 83       	std	Z+4, r25	; 0x04
	
	if(mode < NUM_OF_MODES)
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	68 f4       	brcc	.+26     	; 0x2a8 <ADC__ConfigModes+0x2e>
	{
		if (mode == MODE_8BITS)
 28e:	81 11       	cpse	r24, r1
 290:	04 c0       	rjmp	.+8      	; 0x29a <ADC__ConfigModes+0x20>
		   adc_pt->ADMUX_REG.bit.bit5 = 1;  //Micro.h => ADLAR = 1, alinhado a esquerda e a leitura é no ADCH (8 bits)
 292:	84 81       	ldd	r24, Z+4	; 0x04
 294:	80 62       	ori	r24, 0x20	; 32
 296:	84 83       	std	Z+4, r24	; 0x04
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <ADC__ConfigModes+0x2e>
		if (mode == MODE_10BITS)
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	29 f4       	brne	.+10     	; 0x2a8 <ADC__ConfigModes+0x2e>
		   adc_pt->ADMUX_REG.bit.bit5 = 0;  //ADLAR = 0, alinhado a direita e a leitura é primeiro no ADCL e depois ADCH (10 bits)
 29e:	e8 e7       	ldi	r30, 0x78	; 120
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	84 81       	ldd	r24, Z+4	; 0x04
 2a4:	8f 7d       	andi	r24, 0xDF	; 223
 2a6:	84 83       	std	Z+4, r24	; 0x04
	}
		
	if(conv_type < NUM_OF_CONVERSION_TYPES)
 2a8:	62 30       	cpi	r22, 0x02	; 2
 2aa:	78 f4       	brcc	.+30     	; 0x2ca <ADC__ConfigModes+0x50>
	{
		if (conv_type == AD_SINGLE_CONVERSION)
 2ac:	61 11       	cpse	r22, r1
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <ADC__ConfigModes+0x42>
		   adc_pt->ADCSRA_REG.bit.bit5 = 0;      //Micro.h => ADATE = 0, uma leitura
 2b0:	e8 e7       	ldi	r30, 0x78	; 120
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	82 81       	ldd	r24, Z+2	; 0x02
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	82 83       	std	Z+2, r24	; 0x02
 2ba:	08 95       	ret
		if (conv_type == AD_CONTINUOUS_CONVERSION)
 2bc:	61 30       	cpi	r22, 0x01	; 1
 2be:	29 f4       	brne	.+10     	; 0x2ca <ADC__ConfigModes+0x50>
		   adc_pt->ADCSRA_REG.bit.bit5 = 1;      //ADATE = 1, a fonte de disparo pode ser conversão continua, comparador analogico, etc 
 2c0:	e8 e7       	ldi	r30, 0x78	; 120
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	82 81       	ldd	r24, Z+2	; 0x02
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	82 83       	std	Z+2, r24	; 0x02
 2ca:	08 95       	ret

000002cc <ADC__GetValue>:
 */


unsigned short int ADC__GetValue(AD_CHANNEL_TYPE channel)
{
	if(channel < NUM_OF_AD_CHANNELS)
 2cc:	86 30       	cpi	r24, 0x06	; 6
 2ce:	48 f4       	brcc	.+18     	; 0x2e2 <ADC__GetValue+0x16>
	{
		return ADC_Buffer[channel];  // retorna valor do ADC lido no ADC_Buffer do canal solcitado!
 2d0:	e8 2f       	mov	r30, r24
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	e1 5a       	subi	r30, 0xA1	; 161
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	80 81       	ld	r24, Z
 2de:	91 81       	ldd	r25, Z+1	; 0x01
 2e0:	08 95       	ret
	}
	return 0;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
}
 2e6:	08 95       	ret

000002e8 <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	fb 01       	movw	r30, r22
 2ec:	e6 5c       	subi	r30, 0xC6	; 198
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	31 f0       	breq	.+12     	; 0x302 <Gpio__PinConfig+0x1a>
 2f6:	18 f0       	brcs	.+6      	; 0x2fe <Gpio__PinConfig+0x16>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	29 f0       	breq	.+10     	; 0x306 <Gpio__PinConfig+0x1e>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 2fe:	95 b1       	in	r25, 0x05	; 5
		break;
 300:	03 c0       	rjmp	.+6      	; 0x308 <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
 302:	98 b1       	in	r25, 0x08	; 8
		break;
 304:	01 c0       	rjmp	.+2      	; 0x308 <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
 306:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	69 f4       	brne	.+26     	; 0x326 <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 30c:	e8 2f       	mov	r30, r24
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	e0 50       	subi	r30, 0x00	; 0
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	01 90       	ld	r0, Z+
 31a:	f0 81       	ld	r31, Z
 31c:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 31e:	81 81       	ldd	r24, Z+1	; 0x01
 320:	82 2b       	or	r24, r18
 322:	81 83       	std	Z+1, r24	; 0x01
 324:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 326:	41 11       	cpse	r20, r1
 328:	14 c0       	rjmp	.+40     	; 0x352 <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 32a:	e8 2f       	mov	r30, r24
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	e0 50       	subi	r30, 0x00	; 0
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	01 90       	ld	r0, Z+
 338:	f0 81       	ld	r31, Z
 33a:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 33c:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 33e:	db 01       	movw	r26, r22
 340:	ae 5c       	subi	r26, 0xCE	; 206
 342:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 344:	9c 91       	ld	r25, X
 346:	98 23       	and	r25, r24
 348:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 34a:	92 81       	ldd	r25, Z+2	; 0x02
 34c:	82 2f       	mov	r24, r18
 34e:	89 2b       	or	r24, r25
 350:	82 83       	std	Z+2, r24	; 0x02
 352:	08 95       	ret

00000354 <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 354:	41 11       	cpse	r20, r1
 356:	14 c0       	rjmp	.+40     	; 0x380 <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 358:	e8 2f       	mov	r30, r24
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	e0 50       	subi	r30, 0x00	; 0
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	a0 81       	ld	r26, Z
 366:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 368:	12 96       	adiw	r26, 0x02	; 2
 36a:	9c 91       	ld	r25, X
 36c:	12 97       	sbiw	r26, 0x02	; 2
 36e:	e6 2f       	mov	r30, r22
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ee 5c       	subi	r30, 0xCE	; 206
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 81       	ld	r24, Z
 378:	89 23       	and	r24, r25
 37a:	12 96       	adiw	r26, 0x02	; 2
 37c:	8c 93       	st	X, r24
 37e:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 380:	e8 2f       	mov	r30, r24
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	e0 50       	subi	r30, 0x00	; 0
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	a0 81       	ld	r26, Z
 38e:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 390:	12 96       	adiw	r26, 0x02	; 2
 392:	9c 91       	ld	r25, X
 394:	12 97       	sbiw	r26, 0x02	; 2
 396:	e6 2f       	mov	r30, r22
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	e6 5c       	subi	r30, 0xC6	; 198
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 81       	ld	r24, Z
 3a0:	89 2b       	or	r24, r25
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	8c 93       	st	X, r24
 3a6:	08 95       	ret

000003a8 <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 3a8:	e8 2f       	mov	r30, r24
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	e0 50       	subi	r30, 0x00	; 0
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	01 90       	ld	r0, Z+
 3b6:	f0 81       	ld	r31, Z
 3b8:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 3ba:	90 81       	ld	r25, Z
 3bc:	e6 2f       	mov	r30, r22
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e6 5c       	subi	r30, 0xC6	; 198
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 3c4:	80 81       	ld	r24, Z
 3c6:	98 23       	and	r25, r24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	09 f4       	brne	.+2      	; 0x3ce <Gpio__PinRead+0x26>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
    
}
 3ce:	08 95       	ret

000003d0 <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 3d0:	90 e0       	ldi	r25, 0x00	; 0
	if (value == ACENDE_LED)
 3d2:	66 23       	and	r22, r22
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <Hal__SetLed+0x12>
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 3d6:	fc 01       	movw	r30, r24
 3d8:	e1 59       	subi	r30, 0x91	; 145
 3da:	fe 4f       	sbci	r31, 0xFE	; 254
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	20 83       	st	Z, r18
 3e0:	08 95       	ret
	if (value == ACENDE_LED)
	   Hal_Leds_Buffer[output] = LED_ON;
 3e2:	fc 01       	movw	r30, r24
 3e4:	e1 59       	subi	r30, 0x91	; 145
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	10 82       	st	Z, r1
 3ea:	08 95       	ret

000003ec <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
 3ec:	ef e6       	ldi	r30, 0x6F	; 111
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	23 e7       	ldi	r18, 0x73	; 115
 3f2:	31 e0       	ldi	r19, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 3f4:	91 e0       	ldi	r25, 0x01	; 1
		if (value == ACENDE_LED)
 3f6:	88 23       	and	r24, r24
 3f8:	11 f0       	breq	.+4      	; 0x3fe <Hal__SetAllLeds+0x12>
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 3fa:	90 83       	st	Z, r25
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
 3fe:	10 82       	st	Z, r1
 400:	31 96       	adiw	r30, 0x01	; 1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 402:	e2 17       	cp	r30, r18
 404:	f3 07       	cpc	r31, r19
 406:	b9 f7       	brne	.-18     	; 0x3f6 <Hal__SetAllLeds+0xa>
		{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
		}
}
 408:	08 95       	ret

0000040a <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ce e0       	ldi	r28, 0x0E	; 14
 414:	d1 e0       	ldi	r29, 0x01	; 1
 416:	06 e1       	ldi	r16, 0x16	; 22
 418:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	69 81       	ldd	r22, Y+1	; 0x01
 41e:	88 81       	ld	r24, Y
 420:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Gpio__PinConfig>
 424:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 426:	c0 17       	cp	r28, r16
 428:	d1 07       	cpc	r29, r17
 42a:	b9 f7       	brne	.-18     	; 0x41a <Hal__Initialize+0x10>
 42c:	c6 e0       	ldi	r28, 0x06	; 6
 42e:	d1 e0       	ldi	r29, 0x01	; 1
 430:	0e e0       	ldi	r16, 0x0E	; 14
 432:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	69 81       	ldd	r22, Y+1	; 0x01
 438:	88 81       	ld	r24, Y
 43a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Gpio__PinConfig>
 43e:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 440:	c0 17       	cp	r28, r16
 442:	d1 07       	cpc	r29, r17
 444:	b9 f7       	brne	.-18     	; 0x434 <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(ON);   //apaga todos leds
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
 44c:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
 44e:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
 450:	20 9a       	sbi	0x04, 0	; 4
	
	
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 3d 01 	call	0x27a	; 0x27a <ADC__ConfigModes>
	AD_Mux_State = 	MUX_INIT;
 45a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <AD_Mux_State>
	AD_Channel = POT_EXT;  // equivalente ao canal AD5 do arduino
 45e:	85 e0       	ldi	r24, 0x05	; 5
 460:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <AD_Channel>
 464:	e8 e4       	ldi	r30, 0x48	; 72
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	8f e7       	ldi	r24, 0x7F	; 127
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	c3 e9       	ldi	r28, 0x93	; 147
 46e:	d1 e0       	ldi	r29, 0x01	; 1
 470:	6c e8       	ldi	r22, 0x8C	; 140
 472:	71 e0       	ldi	r23, 0x01	; 1
 474:	4e e4       	ldi	r20, 0x4E	; 78
 476:	51 e0       	ldi	r21, 0x01	; 1

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
	{
		if(AD_Enable_Table[analog_index] == ENABLED)
 478:	21 91       	ld	r18, Z+
 47a:	21 30       	cpi	r18, 0x01	; 1
 47c:	39 f4       	brne	.+14     	; 0x48c <Hal__Initialize+0x82>
		{
			Hal_Analog_Inputs[analog_index] = 0;   // zera o buffer de valor de cada canal
 47e:	dc 01       	movw	r26, r24
 480:	1d 92       	st	X+, r1
 482:	1c 92       	st	X, r1
			AD_Accumulator[analog_index] = 0;
 484:	19 82       	std	Y+1, r1	; 0x01
 486:	18 82       	st	Y, r1
			AD_Counter[analog_index] = 0;
 488:	db 01       	movw	r26, r22
 48a:	1c 92       	st	X, r1
 48c:	02 96       	adiw	r24, 0x02	; 2
 48e:	22 96       	adiw	r28, 0x02	; 2
 490:	6f 5f       	subi	r22, 0xFF	; 255
 492:	7f 4f       	sbci	r23, 0xFF	; 255
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
	AD_Mux_State = 	MUX_INIT;
	AD_Channel = POT_EXT;  // equivalente ao canal AD5 do arduino

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
 494:	e4 17       	cp	r30, r20
 496:	f5 07       	cpc	r31, r21
 498:	79 f7       	brne	.-34     	; 0x478 <Hal__Initialize+0x6e>
			AD_Accumulator[analog_index] = 0;
			AD_Counter[analog_index] = 0;
		}
	}

	}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
 4a4:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
 4a6:	84 30       	cpi	r24, 0x04	; 4
 4a8:	70 f4       	brcc	.+28     	; 0x4c6 <Hal__ReadKey+0x22>
	   {
	   if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
	      return (TRUE);
 4aa:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Hal_Keys_Buffer>
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	a0 e0       	ldi	r26, 0x00	; 0
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	04 c0       	rjmp	.+8      	; 0x4be <Hal__ReadKey+0x1a>
 4b6:	b6 95       	lsr	r27
 4b8:	a7 95       	ror	r26
 4ba:	97 95       	ror	r25
 4bc:	87 95       	ror	r24
 4be:	2a 95       	dec	r18
 4c0:	d2 f7       	brpl	.-12     	; 0x4b6 <Hal__ReadKey+0x12>
 4c2:	81 70       	andi	r24, 0x01	; 1
 4c4:	08 95       	ret
	   }
	 return (FALSE);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
}
 4c8:	08 95       	ret

000004ca <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char *Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
 4ca:	0e 94 85 03 	call	0x70a	; 0x70a <SevenSeg_WriteValueToSegment>
 4ce:	08 95       	ret

000004d0 <Hal_GetAnalogInput>:
 *  Use this function to read a value ADC in the selected channel
 *  
 */
unsigned short int Hal_GetAnalogInput(ANALOG_INPUT_TYPE input)
{
if(input < NUM_OF_ANALOG_INPUT)
 4d0:	86 30       	cpi	r24, 0x06	; 6
 4d2:	48 f4       	brcc	.+18     	; 0x4e6 <Hal_GetAnalogInput+0x16>
   return Hal_Analog_Inputs[input];  // retorna o valor no buffer HAL_AnalogInputs do canal solicitado
 4d4:	e8 2f       	mov	r30, r24
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	e1 58       	subi	r30, 0x81	; 129
 4de:	fe 4f       	sbci	r31, 0xFE	; 254
 4e0:	80 81       	ld	r24, Z
 4e2:	91 81       	ldd	r25, Z+1	; 0x01
 4e4:	08 95       	ret
}
 4e6:	08 95       	ret

000004e8 <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
 4e8:	af 92       	push	r10
 4ea:	bf 92       	push	r11
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	c2 e5       	ldi	r28, 0x52	; 82
 4fe:	d1 e0       	ldi	r29, 0x01	; 1
 500:	0f 2e       	mov	r0, r31
 502:	ff e6       	ldi	r31, 0x6F	; 111
 504:	ef 2e       	mov	r14, r31
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	ff 2e       	mov	r15, r31
 50a:	f0 2d       	mov	r31, r0
 50c:	0e e0       	ldi	r16, 0x0E	; 14
 50e:	11 e0       	ldi	r17, 0x01	; 1
 510:	0f 2e       	mov	r0, r31
 512:	f6 e5       	ldi	r31, 0x56	; 86
 514:	cf 2e       	mov	r12, r31
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	df 2e       	mov	r13, r31
 51a:	f0 2d       	mov	r31, r0
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 51c:	bb 24       	eor	r11, r11
 51e:	b3 94       	inc	r11
 520:	a1 2c       	mov	r10, r1
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		if(Leds_Enable_Table[index] == ENABLED) // Update GPIO only if current LED is configured to be used
 522:	89 91       	ld	r24, Y+
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	59 f4       	brne	.+22     	; 0x53e <LEDsUpdate+0x56>
 528:	f8 01       	movw	r30, r16
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 52a:	4b 2d       	mov	r20, r11
 52c:	d7 01       	movw	r26, r14
 52e:	8c 91       	ld	r24, X
 530:	81 11       	cpse	r24, r1
 532:	01 c0       	rjmp	.+2      	; 0x536 <LEDsUpdate+0x4e>
 534:	4a 2d       	mov	r20, r10
 536:	61 81       	ldd	r22, Z+1	; 0x01
 538:	80 81       	ld	r24, Z
 53a:	0e 94 aa 01 	call	0x354	; 0x354 <Gpio__PinWrite>
 53e:	bf ef       	ldi	r27, 0xFF	; 255
 540:	eb 1a       	sub	r14, r27
 542:	fb 0a       	sbc	r15, r27
 544:	0e 5f       	subi	r16, 0xFE	; 254
 546:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
 548:	cc 15       	cp	r28, r12
 54a:	dd 05       	cpc	r29, r13
 54c:	51 f7       	brne	.-44     	; 0x522 <LEDsUpdate+0x3a>
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		}
	}
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	bf 90       	pop	r11
 560:	af 90       	pop	r10
 562:	08 95       	ret

00000564 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
 564:	8f 92       	push	r8
 566:	9f 92       	push	r9
 568:	af 92       	push	r10
 56a:	bf 92       	push	r11
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	0f 2e       	mov	r0, r31
 57c:	fe e4       	ldi	r31, 0x4E	; 78
 57e:	ef 2e       	mov	r14, r31
 580:	f1 e0       	ldi	r31, 0x01	; 1
 582:	ff 2e       	mov	r15, r31
 584:	f0 2d       	mov	r31, r0
 586:	06 e0       	ldi	r16, 0x06	; 6
 588:	11 e0       	ldi	r17, 0x01	; 1
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 58e:	81 2c       	mov	r8, r1
 590:	91 2c       	mov	r9, r1
 592:	54 01       	movw	r10, r8
 594:	83 94       	inc	r8
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
	{
		if(Keys_Enable_Table[key_index] == ENABLED)
 596:	f7 01       	movw	r30, r14
 598:	81 91       	ld	r24, Z+
 59a:	7f 01       	movw	r14, r30
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	39 f5       	brne	.+78     	; 0x5ee <KeysRead+0x8a>
		{
			value = Gpio__PinRead(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
 5a0:	f8 01       	movw	r30, r16
 5a2:	61 81       	ldd	r22, Z+1	; 0x01
 5a4:	80 81       	ld	r24, Z
 5a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Gpio__PinRead>
			if(value == KEY_PRESSED)
 5aa:	81 11       	cpse	r24, r1
 5ac:	10 c0       	rjmp	.+32     	; 0x5ce <KeysRead+0x6a>
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
 5ae:	d5 01       	movw	r26, r10
 5b0:	c4 01       	movw	r24, r8
 5b2:	0c 2e       	mov	r0, r28
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <KeysRead+0x5a>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	0a 94       	dec	r0
 5c0:	d2 f7       	brpl	.-12     	; 0x5b6 <KeysRead+0x52>
 5c2:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <Hal_Keys_Buffer>
 5c6:	82 2b       	or	r24, r18
 5c8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <Hal_Keys_Buffer>
 5cc:	10 c0       	rjmp	.+32     	; 0x5ee <KeysRead+0x8a>
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 5ce:	d5 01       	movw	r26, r10
 5d0:	c4 01       	movw	r24, r8
 5d2:	0c 2e       	mov	r0, r28
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <KeysRead+0x7a>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	aa 1f       	adc	r26, r26
 5dc:	bb 1f       	adc	r27, r27
 5de:	0a 94       	dec	r0
 5e0:	d2 f7       	brpl	.-12     	; 0x5d6 <KeysRead+0x72>
 5e2:	80 95       	com	r24
 5e4:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <Hal_Keys_Buffer>
 5e8:	89 23       	and	r24, r25
 5ea:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <Hal_Keys_Buffer>
 5ee:	21 96       	adiw	r28, 0x01	; 1
 5f0:	0e 5f       	subi	r16, 0xFE	; 254
 5f2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
 5f4:	c4 30       	cpi	r28, 0x04	; 4
 5f6:	d1 05       	cpc	r29, r1
 5f8:	71 f6       	brne	.-100    	; 0x596 <KeysRead+0x32>

			}
		}
	}

}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	df 90       	pop	r13
 608:	bf 90       	pop	r11
 60a:	af 90       	pop	r10
 60c:	9f 90       	pop	r9
 60e:	8f 90       	pop	r8
 610:	08 95       	ret

00000612 <Hal__FastHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA GPIO
 */
void Hal__FastHandler(void)
{
	LEDsUpdate();
 612:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LEDsUpdate>
	KeysRead();
 616:	0e 94 b2 02 	call	0x564	; 0x564 <KeysRead>
 61a:	08 95       	ret

0000061c <ADProcess>:
 *  This local function reads the analog input and update the buffer Hal_Analog_inputs[]
    ROTINA ONDE SÃO FEITAS AS VÁRIAS LEITURAS DE AMOSTRAGEM (NUM_AD_SAMPLES) E DEPOIS TIRADO A MÉDIA DOS  VALORES
****/

void ADProcess(void)
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
switch (AD_Mux_State)
 620:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <AD_Mux_State>
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	19 f0       	breq	.+6      	; 0x62e <ADProcess+0x12>
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	31 f0       	breq	.+12     	; 0x638 <ADProcess+0x1c>
 62c:	5d c0       	rjmp	.+186    	; 0x6e8 <ADProcess+0xcc>
  {
  case MUX_INIT:
    break;
  case MUX_AD_CONFIG:
    ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	0e 94 3d 01 	call	0x27a	; 0x27a <ADC__ConfigModes>
    break;
 636:	58 c0       	rjmp	.+176    	; 0x6e8 <ADProcess+0xcc>
  case MUX_DUMMY_STATE_1: //=> This state is placed in order to assure the raising time for ADC reading
    break;
  case MUX_AD_READ:
      if(AD_Enable_Table[AD_Channel] == ENABLED)
 638:	c0 91 6e 01 	lds	r28, 0x016E	; 0x80016e <AD_Channel>
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	fe 01       	movw	r30, r28
 640:	e8 5b       	subi	r30, 0xB8	; 184
 642:	fe 4f       	sbci	r31, 0xFE	; 254
 644:	80 81       	ld	r24, Z
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	09 f0       	breq	.+2      	; 0x64c <ADProcess+0x30>
 64a:	44 c0       	rjmp	.+136    	; 0x6d4 <ADProcess+0xb8>
         {
         if(AD_Counter[AD_Channel] < NUM_AD_SAMPLES)
 64c:	fe 01       	movw	r30, r28
 64e:	e4 57       	subi	r30, 0x74	; 116
 650:	fe 4f       	sbci	r31, 0xFE	; 254
 652:	80 81       	ld	r24, Z
 654:	88 30       	cpi	r24, 0x08	; 8
 656:	38 f5       	brcc	.+78     	; 0x6a6 <ADProcess+0x8a>
             {
             AD_Sample[AD_Channel] = ADC__GetValue(AD_Channel_Table[AD_Channel]);
 658:	fe 01       	movw	r30, r28
 65a:	ee 5b       	subi	r30, 0xBE	; 190
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	80 81       	ld	r24, Z
 660:	0e 94 66 01 	call	0x2cc	; 0x2cc <ADC__GetValue>
 664:	cc 0f       	add	r28, r28
 666:	dd 1f       	adc	r29, r29
 668:	cd 58       	subi	r28, 0x8D	; 141
 66a:	de 4f       	sbci	r29, 0xFE	; 254
 66c:	99 83       	std	Y+1, r25	; 0x01
 66e:	88 83       	st	Y, r24
             AD_Accumulator[AD_Channel] += AD_Sample[AD_Channel];
 670:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <AD_Channel>
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	cf 01       	movw	r24, r30
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	dc 01       	movw	r26, r24
 67e:	ad 56       	subi	r26, 0x6D	; 109
 680:	be 4f       	sbci	r27, 0xFE	; 254
 682:	ec 01       	movw	r28, r24
 684:	cd 58       	subi	r28, 0x8D	; 141
 686:	de 4f       	sbci	r29, 0xFE	; 254
 688:	2d 91       	ld	r18, X+
 68a:	3c 91       	ld	r19, X
 68c:	11 97       	sbiw	r26, 0x01	; 1
 68e:	88 81       	ld	r24, Y
 690:	99 81       	ldd	r25, Y+1	; 0x01
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	8d 93       	st	X+, r24
 698:	9c 93       	st	X, r25
             AD_Counter[AD_Channel]++;
 69a:	e4 57       	subi	r30, 0x74	; 116
 69c:	fe 4f       	sbci	r31, 0xFE	; 254
 69e:	80 81       	ld	r24, Z
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 83       	st	Z, r24
 6a4:	17 c0       	rjmp	.+46     	; 0x6d4 <ADProcess+0xb8>
             }
         else
            {  // O Buffer Hal_Analog_Inputs[] é a média do valor de ADC e éAQUI atualizado!
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
 6a6:	fe 01       	movw	r30, r28
 6a8:	ee 0f       	add	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	df 01       	movw	r26, r30
 6ae:	a1 58       	subi	r26, 0x81	; 129
 6b0:	be 4f       	sbci	r27, 0xFE	; 254
 6b2:	ed 56       	subi	r30, 0x6D	; 109
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	80 81       	ld	r24, Z
 6b8:	91 81       	ldd	r25, Z+1	; 0x01
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	96 95       	lsr	r25
 6c0:	87 95       	ror	r24
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	8d 93       	st	X+, r24
 6c8:	9c 93       	st	X, r25
            AD_Accumulator[AD_Channel] = 0;
 6ca:	11 82       	std	Z+1, r1	; 0x01
 6cc:	10 82       	st	Z, r1
            AD_Counter[AD_Channel] = 0;
 6ce:	c4 57       	subi	r28, 0x74	; 116
 6d0:	de 4f       	sbci	r29, 0xFE	; 254
 6d2:	18 82       	st	Y, r1
            }
          } 
       AD_Channel++;
 6d4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <AD_Channel>
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
 6da:	86 30       	cpi	r24, 0x06	; 6
 6dc:	18 f4       	brcc	.+6      	; 0x6e4 <ADProcess+0xc8>
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
            AD_Accumulator[AD_Channel] = 0;
            AD_Counter[AD_Channel] = 0;
            }
          } 
       AD_Channel++;
 6de:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <AD_Channel>
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <ADProcess+0xcc>
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
         {
         AD_Channel = 0;
 6e4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <AD_Channel>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
 6e8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <AD_Mux_State>
 6ec:	8f 5f       	subi	r24, 0xFF	; 255

if (AD_Mux_State >= NUM_MUX_STEPS)
 6ee:	84 30       	cpi	r24, 0x04	; 4
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <ADProcess+0xdc>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
 6f2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <AD_Mux_State>
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <ADProcess+0xe2>

if (AD_Mux_State >= NUM_MUX_STEPS)
  {
  AD_Mux_State = MUX_AD_CONFIG;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <AD_Mux_State>
  }
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <Hal__BackgroundHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA ADC
 */
void Hal__BackgroundHandler(void)
{
 ADProcess();	
 704:	0e 94 0e 03 	call	0x61c	; 0x61c <ADProcess>
 708:	08 95       	ret

0000070a <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char *Value)
{
 70a:	fb 01       	movw	r30, r22
	bitClear(PORTD, 4);
 70c:	5c 98       	cbi	0x0b, 4	; 11
 70e:	47 e0       	ldi	r20, 0x07	; 7
 710:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!((*Value) & (1 << (7 - i))));
 712:	20 81       	ld	r18, Z
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	04 2e       	mov	r0, r20
 718:	02 c0       	rjmp	.+4      	; 0x71e <SevenSeg_WriteValueToSegment+0x14>
 71a:	35 95       	asr	r19
 71c:	27 95       	ror	r18
 71e:	0a 94       	dec	r0
 720:	e2 f7       	brpl	.-8      	; 0x71a <SevenSeg_WriteValueToSegment+0x10>
 722:	20 ff       	sbrs	r18, 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <SevenSeg_WriteValueToSegment+0x20>
 726:	28 9a       	sbi	0x05, 0	; 5
 728:	01 c0       	rjmp	.+2      	; 0x72c <SevenSeg_WriteValueToSegment+0x22>
 72a:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 72c:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 72e:	5f 98       	cbi	0x0b, 7	; 11
 730:	41 50       	subi	r20, 0x01	; 1
 732:	51 09       	sbc	r21, r1
 734:	70 f7       	brcc	.-36     	; 0x712 <SevenSeg_WriteValueToSegment+0x8>
 736:	27 e0       	ldi	r18, 0x07	; 7
 738:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));
 73a:	e8 2f       	mov	r30, r24
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	ea 5a       	subi	r30, 0xAA	; 170
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	40 81       	ld	r20, Z
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	ca 01       	movw	r24, r20
 748:	02 2e       	mov	r0, r18
 74a:	02 c0       	rjmp	.+4      	; 0x750 <SevenSeg_WriteValueToSegment+0x46>
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
 750:	0a 94       	dec	r0
 752:	e2 f7       	brpl	.-8      	; 0x74c <SevenSeg_WriteValueToSegment+0x42>
 754:	80 ff       	sbrs	r24, 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <SevenSeg_WriteValueToSegment+0x52>
 758:	28 9a       	sbi	0x05, 0	; 5
 75a:	01 c0       	rjmp	.+2      	; 0x75e <SevenSeg_WriteValueToSegment+0x54>
 75c:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 75e:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 760:	5f 98       	cbi	0x0b, 7	; 11
 762:	21 50       	subi	r18, 0x01	; 1
 764:	31 09       	sbc	r19, r1
 766:	78 f7       	brcc	.-34     	; 0x746 <SevenSeg_WriteValueToSegment+0x3c>
	}

	bitSet(PORTD, 4);
 768:	5c 9a       	sbi	0x0b, 4	; 11
 76a:	08 95       	ret

0000076c <Display__Initialize>:
/**
 *  
 */
void Display__Initialize(void)
{
	Oven_Display_State = OVEN_INIT;
 76c:	84 e0       	ldi	r24, 0x04	; 4
 76e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 772:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Display_Keys_Map>
 776:	08 95       	ret

00000778 <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 778:	86 30       	cpi	r24, 0x06	; 6
 77a:	10 f4       	brcc	.+4      	; 0x780 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 77c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <Oven_Display_State>
 780:	08 95       	ret

00000782 <UpdateDisplayLeds>:
 */
void UpdateDisplayLeds(void)
{
	unsigned short int ad_value;
	
	switch(Oven_Display_State)
 782:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Oven_Display_State>
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	51 f0       	breq	.+20     	; 0x79e <UpdateDisplayLeds+0x1c>
 78a:	28 f0       	brcs	.+10     	; 0x796 <UpdateDisplayLeds+0x14>
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	19 f1       	breq	.+70     	; 0x7d6 <UpdateDisplayLeds+0x54>
 790:	83 30       	cpi	r24, 0x03	; 3
 792:	e9 f1       	breq	.+122    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 794:	08 95       	ret
	{
	case OVEN_OFF:
	      {
	       Hal__SetAllLeds(APAGA_LED);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Hal__SetAllLeds>
		   break;
 79c:	08 95       	ret
	case OVEN_INIT:
	case OVEN_TIMEOUT:
	   	break;
	case OVEN_MIN:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 7a6:	61 e0       	ldi	r22, 0x01	; 1
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		
		ad_value = Hal_GetAnalogInput(POT_EXT);
 7b6:	85 e0       	ldi	r24, 0x05	; 5
 7b8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Hal_GetAnalogInput>
	    if (ad_value > 300)
 7bc:	8d 32       	cpi	r24, 0x2D	; 45
 7be:	91 40       	sbci	r25, 0x01	; 1
 7c0:	28 f0       	brcs	.+10     	; 0x7cc <UpdateDisplayLeds+0x4a>
			Hal__SetLed(LED_3, 0);
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
 7ca:	08 95       	ret
	    else
			Hal__SetLed(LED_3, 1);
 7cc:	61 e0       	ldi	r22, 0x01	; 1
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
 7d4:	08 95       	ret
		break;
	}
	case OVEN_MED:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		
		ad_value = Hal_GetAnalogInput(POT_EXT);
 7ee:	85 e0       	ldi	r24, 0x05	; 5
 7f0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Hal_GetAnalogInput>
		if (ad_value > 500)
 7f4:	85 3f       	cpi	r24, 0xF5	; 245
 7f6:	91 40       	sbci	r25, 0x01	; 1
 7f8:	28 f0       	brcs	.+10     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			Hal__SetLed(LED_3, 0);
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
 802:	08 95       	ret
		else
			Hal__SetLed(LED_3, 1);
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	83 e0       	ldi	r24, 0x03	; 3
 808:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
 80c:	08 95       	ret

		break;
	}
	case OVEN_MAX:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
		
		ad_value = Hal_GetAnalogInput(POT_EXT);
 826:	85 e0       	ldi	r24, 0x05	; 5
 828:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Hal_GetAnalogInput>
		if (ad_value > 800)
 82c:	81 32       	cpi	r24, 0x21	; 33
 82e:	93 40       	sbci	r25, 0x03	; 3
 830:	28 f0       	brcs	.+10     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			Hal__SetLed(LED_3, 0);
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	83 e0       	ldi	r24, 0x03	; 3
 836:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
 83a:	08 95       	ret
		else
			Hal__SetLed(LED_3, 1);
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	83 e0       	ldi	r24, 0x03	; 3
 840:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Hal__SetLed>
 844:	08 95       	ret

00000846 <ReadDisplayKeys>:
void ReadDisplayKeys(void)
{
        unsigned char leitura;
        //Display_Keys_Map = KEY_NONE;
		
		leitura = Hal__ReadKey(KEY_0);
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Hal__ReadKey>
		if(leitura  == TRUE)
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	11 f4       	brne	.+4      	; 0x854 <ReadDisplayKeys+0xe>
		     {
			Display_Keys_Map = KEY_MIN_EVENT;
 850:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Display_Keys_Map>
			 }
		leitura = Hal__ReadKey(KEY_1);
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Hal__ReadKey>
		if(leitura == TRUE)
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	19 f4       	brne	.+6      	; 0x864 <ReadDisplayKeys+0x1e>
		    {
			Display_Keys_Map = KEY_MED_EVENT;
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Display_Keys_Map>
			}
		leitura = Hal__ReadKey(KEY_2);
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Hal__ReadKey>
		if(leitura == TRUE)
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	19 f4       	brne	.+6      	; 0x874 <ReadDisplayKeys+0x2e>
		    {
			Display_Keys_Map =  KEY_MAX_EVENT;
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Display_Keys_Map>
			}
		leitura = Hal__ReadKey(KEY_3);
 874:	83 e0       	ldi	r24, 0x03	; 3
 876:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Hal__ReadKey>
		if(leitura == TRUE)
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	11 f4       	brne	.+4      	; 0x882 <ReadDisplayKeys+0x3c>
			{
			Display_Keys_Map =  KEY_OFF_EVENT; 
 87e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Display_Keys_Map>
 882:	08 95       	ret

00000884 <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
 884:	0e 94 23 04 	call	0x846	; 0x846 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
	
}
 888:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <Display_Keys_Map>
 88c:	08 95       	ret

0000088e <UpdateDisplaySevenSeg>:
 */
void UpdateDisplaySevenSeg(void)
{
char i;
char *p_digito;
switch(Oven_Display_State)
 88e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Oven_Display_State>
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	e1 f0       	breq	.+56     	; 0x8ce <UpdateDisplaySevenSeg+0x40>
 896:	30 f0       	brcs	.+12     	; 0x8a4 <UpdateDisplaySevenSeg+0x16>
 898:	82 30       	cpi	r24, 0x02	; 2
 89a:	71 f1       	breq	.+92     	; 0x8f8 <UpdateDisplaySevenSeg+0x6a>
 89c:	83 30       	cpi	r24, 0x03	; 3
 89e:	09 f4       	brne	.+2      	; 0x8a2 <UpdateDisplaySevenSeg+0x14>
 8a0:	40 c0       	rjmp	.+128    	; 0x922 <__stack+0x23>
 8a2:	08 95       	ret
	{
	case OVEN_OFF:
		{
		p_digito = &ZERADO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 8a4:	62 e2       	ldi	r22, 0x22	; 34
 8a6:	71 e0       	ldi	r23, 0x01	; 1
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8ae:	63 e2       	ldi	r22, 0x23	; 35
 8b0:	71 e0       	ldi	r23, 0x01	; 1
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8b8:	64 e2       	ldi	r22, 0x24	; 36
 8ba:	71 e0       	ldi	r23, 0x01	; 1
 8bc:	82 e0       	ldi	r24, 0x02	; 2
 8be:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8c2:	65 e2       	ldi	r22, 0x25	; 37
 8c4:	71 e0       	ldi	r23, 0x01	; 1
 8c6:	83 e0       	ldi	r24, 0x03	; 3
 8c8:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8cc:	08 95       	ret
		//Hal__WriteValtoSegment(1, 0xC0);
		//Hal__WriteValtoSegment(2, 0x80);
		//Hal__WriteValtoSegment(3, 0xC0);
		p_digito = &MINIMO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 8ce:	6e e1       	ldi	r22, 0x1E	; 30
 8d0:	71 e0       	ldi	r23, 0x01	; 1
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8d8:	6f e1       	ldi	r22, 0x1F	; 31
 8da:	71 e0       	ldi	r23, 0x01	; 1
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8e2:	60 e2       	ldi	r22, 0x20	; 32
 8e4:	71 e0       	ldi	r23, 0x01	; 1
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8ec:	61 e2       	ldi	r22, 0x21	; 33
 8ee:	71 e0       	ldi	r23, 0x01	; 1
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 8f6:	08 95       	ret
		//Hal__WriteValtoSegment(1, 0xA4);
		//Hal__WriteValtoSegment(2, 0x82);
		//Hal__WriteValtoSegment(3, 0xC0);
		p_digito = &MEDIO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 8f8:	6a e1       	ldi	r22, 0x1A	; 26
 8fa:	71 e0       	ldi	r23, 0x01	; 1
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 902:	6b e1       	ldi	r22, 0x1B	; 27
 904:	71 e0       	ldi	r23, 0x01	; 1
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 90c:	6c e1       	ldi	r22, 0x1C	; 28
 90e:	71 e0       	ldi	r23, 0x01	; 1
 910:	82 e0       	ldi	r24, 0x02	; 2
 912:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 916:	6d e1       	ldi	r22, 0x1D	; 29
 918:	71 e0       	ldi	r23, 0x01	; 1
 91a:	83 e0       	ldi	r24, 0x03	; 3
 91c:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 920:	08 95       	ret
		//Hal__WriteValtoSegment(1, 0xB0);
		//Hal__WriteValtoSegment(2, 0xA4);
		//Hal__WriteValtoSegment(3, 0xC0);
		p_digito = &MAXIMO_DIGITO;   // ou p_digito = &MAXIMO_DIGITO[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 922:	66 e1       	ldi	r22, 0x16	; 22
 924:	71 e0       	ldi	r23, 0x01	; 1
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 92c:	67 e1       	ldi	r22, 0x17	; 23
 92e:	71 e0       	ldi	r23, 0x01	; 1
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 936:	68 e1       	ldi	r22, 0x18	; 24
 938:	71 e0       	ldi	r23, 0x01	; 1
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 940:	69 e1       	ldi	r22, 0x19	; 25
 942:	71 e0       	ldi	r23, 0x01	; 1
 944:	83 e0       	ldi	r24, 0x03	; 3
 946:	0e 94 65 02 	call	0x4ca	; 0x4ca <Hal__WriteValtoSegment>
 94a:	08 95       	ret

0000094c <Display__Handler>:
/**
 *  
 */
void Display__Handler(void)
{
ReadDisplayKeys();
 94c:	0e 94 23 04 	call	0x846	; 0x846 <ReadDisplayKeys>
	
#if (LED_DISPLAY == ENABLED)	
	UpdateDisplayLeds();
 950:	0e 94 c1 03 	call	0x782	; 0x782 <UpdateDisplayLeds>
#endif	

#if (SEVEN_SEG_DISPLAY == ENABLED)
     UpdateDisplaySevenSeg();
 954:	0e 94 47 04 	call	0x88e	; 0x88e <UpdateDisplaySevenSeg>
 958:	08 95       	ret

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
